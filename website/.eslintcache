[{"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\index.tsx":"1","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\serviceWorker.js":"2","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\App.tsx":"3","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\index.js":"4","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\theme\\index.tsx":"5","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Main\\index.tsx":"6","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\index.tsx":"7","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\styles.js":"8","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\signer.tsx":"9","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Body\\index.tsx":"10","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\hooks\\index.tsx":"11","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Buttons.js":"12","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Card.js":"13","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Checkout.js":"14","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Button.js":"15","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Connect.js":"16","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Works.js":"17","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\BuyAndSell.js":"18","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Redeem.js":"19","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Confirmed.js":"20","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\RedeemForm.js":"21","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\IncrementToken.js":"22","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Gallery\\index.js":"23","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\SelectToken.js":"24","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Suggest.js":"25","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\context\\index.tsx":"26"},{"size":432,"mtime":1612109074275,"results":"27","hashOfConfig":"28"},{"size":4871,"mtime":1592256762000,"results":"29","hashOfConfig":"28"},{"size":1562,"mtime":1612109345383,"results":"30","hashOfConfig":"28"},{"size":1354,"mtime":1604779882992,"results":"31","hashOfConfig":"28"},{"size":1081,"mtime":1612109081329,"results":"32","hashOfConfig":"28"},{"size":17699,"mtime":1612109112991,"results":"33","hashOfConfig":"28"},{"size":6172,"mtime":1612109726665,"results":"34","hashOfConfig":"28"},{"size":144,"mtime":1592256762000,"results":"35","hashOfConfig":"28"},{"size":863,"mtime":1612109136045,"results":"36","hashOfConfig":"28"},{"size":8279,"mtime":1612110177725,"results":"37","hashOfConfig":"28"},{"size":5242,"mtime":1612109123281,"results":"38","hashOfConfig":"28"},{"size":1116,"mtime":1592256762000,"results":"39","hashOfConfig":"28"},{"size":2957,"mtime":1592256762000,"results":"40","hashOfConfig":"28"},{"size":6944,"mtime":1592256762000,"results":"41","hashOfConfig":"28"},{"size":2426,"mtime":1592256762000,"results":"42","hashOfConfig":"28"},{"size":2648,"mtime":1592256762000,"results":"43","hashOfConfig":"28"},{"size":2367,"mtime":1592256762000,"results":"44","hashOfConfig":"28"},{"size":10480,"mtime":1592256762000,"results":"45","hashOfConfig":"28"},{"size":13157,"mtime":1592256762000,"results":"46","hashOfConfig":"28"},{"size":5318,"mtime":1592256762000,"results":"47","hashOfConfig":"28"},{"size":10084,"mtime":1592256762000,"results":"48","hashOfConfig":"28"},{"size":1506,"mtime":1592256762000,"results":"49","hashOfConfig":"28"},{"size":646,"mtime":1592256762000,"results":"50","hashOfConfig":"28"},{"size":1884,"mtime":1592256762000,"results":"51","hashOfConfig":"28"},{"size":2505,"mtime":1592256762000,"results":"52","hashOfConfig":"28"},{"size":2032,"mtime":1612114000116,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"m8v9km",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\index.tsx",[],["110","111"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\serviceWorker.js",[],["112","113"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\App.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\index.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\theme\\index.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Main\\index.tsx",["114","115"],"import React, { useState, useCallback, useEffect } from 'react'\r\nimport { useWeb3Context } from 'web3-react'\r\nimport { ethers } from 'ethers'\r\n\r\nimport { TOKEN_SYMBOLS, TOKEN_ADDRESSES, ERROR_CODES } from '../../utils'\r\nimport {\r\n  useTokenContract,\r\n  useExchangeContract,\r\n  useAddressBalance,\r\n  useAddressAllowance,\r\n  useExchangeReserves,\r\n  useExchangeAllowance,\r\n  useTotalSupply\r\n} from '../../hooks'\r\nimport Body from '../Body'\r\n\r\n// denominated in bips\r\nconst GAS_MARGIN = ethers.utils.bigNumberify(1000)\r\n\r\nexport function calculateGasMargin(value, margin) {\r\n  const offset = value.mul(margin).div(ethers.utils.bigNumberify(10000))\r\n  return value.add(offset)\r\n}\r\n\r\n// denominated in seconds\r\nconst DEADLINE_FROM_NOW = 60 * 15\r\n\r\n// denominated in bips\r\nconst ALLOWED_SLIPPAGE = ethers.utils.bigNumberify(200)\r\n\r\nfunction calculateSlippageBounds(value) {\r\n  const offset = value.mul(ALLOWED_SLIPPAGE).div(ethers.utils.bigNumberify(10000))\r\n  const minimum = value.sub(offset)\r\n  const maximum = value.add(offset)\r\n  return {\r\n    minimum: minimum.lt(ethers.constants.Zero) ? ethers.constants.Zero : minimum,\r\n    maximum: maximum.gt(ethers.constants.MaxUint256) ? ethers.constants.MaxUint256 : maximum\r\n  }\r\n}\r\n\r\n// this mocks the getInputPrice function, and calculates the required output\r\nfunction calculateEtherTokenOutputFromInput(inputAmount, inputReserve, outputReserve) {\r\n  const inputAmountWithFee = inputAmount.mul(ethers.utils.bigNumberify(997))\r\n  const numerator = inputAmountWithFee.mul(outputReserve)\r\n  const denominator = inputReserve.mul(ethers.utils.bigNumberify(1000)).add(inputAmountWithFee)\r\n  return numerator.div(denominator)\r\n}\r\n\r\n// this mocks the getOutputPrice function, and calculates the required input\r\nfunction calculateEtherTokenInputFromOutput(outputAmount, inputReserve, outputReserve) {\r\n  const numerator = inputReserve.mul(outputAmount).mul(ethers.utils.bigNumberify(1000))\r\n  const denominator = outputReserve.sub(outputAmount).mul(ethers.utils.bigNumberify(997))\r\n  return numerator.div(denominator).add(ethers.constants.One)\r\n}\r\n\r\n// get exchange rate for a token/ETH pair\r\nfunction getExchangeRate(inputValue, outputValue, invert = false) {\r\n  const inputDecimals = 18\r\n  const outputDecimals = 18\r\n\r\n  if (inputValue && inputDecimals && outputValue && outputDecimals) {\r\n    const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\r\n\r\n    if (invert) {\r\n      return inputValue\r\n        .mul(factor)\r\n        .div(outputValue)\r\n        .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\r\n        .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\r\n    } else {\r\n      return outputValue\r\n        .mul(factor)\r\n        .div(inputValue)\r\n        .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\r\n        .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateAmount(\r\n  inputTokenSymbol,\r\n  outputTokenSymbol,\r\n  SOCKSAmount,\r\n  reserveSOCKSETH,\r\n  reserveSOCKSToken,\r\n  reserveSelectedTokenETH,\r\n  reserveSelectedTokenToken\r\n) {\r\n  // eth to token - buy\r\n  if (inputTokenSymbol === TOKEN_SYMBOLS.ETH && outputTokenSymbol === TOKEN_SYMBOLS.OWN) {\r\n    const amount = calculateEtherTokenInputFromOutput(SOCKSAmount, reserveSOCKSETH, reserveSOCKSToken)\r\n    if (amount.lte(ethers.constants.Zero) || amount.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n    return amount\r\n  }\r\n\r\n  // token to eth - sell\r\n  if (inputTokenSymbol === TOKEN_SYMBOLS.OWN && outputTokenSymbol === TOKEN_SYMBOLS.ETH) {\r\n    const amount = calculateEtherTokenOutputFromInput(SOCKSAmount, reserveSOCKSToken, reserveSOCKSETH)\r\n    if (amount.lte(ethers.constants.Zero) || amount.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n\r\n    return amount\r\n  }\r\n\r\n  // token to token - buy or sell\r\n  const buyingSOCKS = outputTokenSymbol === TOKEN_SYMBOLS.OWN\r\n\r\n  if (buyingSOCKS) {\r\n    // eth needed to buy x socks\r\n    const intermediateValue = calculateEtherTokenInputFromOutput(SOCKSAmount, reserveSOCKSETH, reserveSOCKSToken)\r\n    // calculateEtherTokenOutputFromInput\r\n    if (intermediateValue.lte(ethers.constants.Zero) || intermediateValue.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n    // tokens needed to buy x eth\r\n    const amount = calculateEtherTokenInputFromOutput(\r\n      intermediateValue,\r\n      reserveSelectedTokenToken,\r\n      reserveSelectedTokenETH\r\n    )\r\n    if (amount.lte(ethers.constants.Zero) || amount.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n    return amount\r\n  } else {\r\n    // eth gained from selling x socks\r\n    const intermediateValue = calculateEtherTokenOutputFromInput(SOCKSAmount, reserveSOCKSToken, reserveSOCKSETH)\r\n    if (intermediateValue.lte(ethers.constants.Zero) || intermediateValue.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n    // tokens yielded from selling x eth\r\n    const amount = calculateEtherTokenOutputFromInput(\r\n      intermediateValue,\r\n      reserveSelectedTokenETH,\r\n      reserveSelectedTokenToken\r\n    )\r\n    if (amount.lte(ethers.constants.Zero) || amount.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n    return amount\r\n  }\r\n}\r\n\r\nexport default function Main() {\r\n  const { library, account } = useWeb3Context()\r\n\r\n  // selected token\r\n  const [selectedTokenSymbol, setSelectedTokenSymbol] = useState(TOKEN_SYMBOLS.ETH)\r\n\r\n  // get exchange contracts\r\n  const exchangeContractSOCKS = useExchangeContract(TOKEN_ADDRESSES.OWN)\r\n  const exchangeContractSelectedToken = useExchangeContract(TOKEN_ADDRESSES[selectedTokenSymbol])\r\n\r\n  // get token contracts\r\n  const tokenContractSOCKS = useTokenContract(TOKEN_ADDRESSES.OWN)\r\n  const tokenContractSelectedToken = useTokenContract(TOKEN_ADDRESSES[selectedTokenSymbol])\r\n\r\n  // get balances\r\n  const balanceETH = useAddressBalance(account, TOKEN_ADDRESSES.ETH)\r\n  const balanceSOCKS = useAddressBalance(account, TOKEN_ADDRESSES.OWN)\r\n  const balanceSelectedToken = useAddressBalance(account, TOKEN_ADDRESSES[selectedTokenSymbol])\r\n\r\n  // totalsupply\r\n  const totalSupply = useTotalSupply(tokenContractSOCKS)\r\n  console.log('total', totalSupply)\r\n\r\n  // get allowances\r\n  const allowanceSOCKS = useAddressAllowance(\r\n    account,\r\n    TOKEN_ADDRESSES.OWN,\r\n    exchangeContractSOCKS && exchangeContractSOCKS.address\r\n  )\r\n  const allowanceSelectedToken = useExchangeAllowance(account, TOKEN_ADDRESSES[selectedTokenSymbol])\r\n\r\n  // get reserves\r\n  const reserveSOCKSETH = useAddressBalance(exchangeContractSOCKS && exchangeContractSOCKS.address, TOKEN_ADDRESSES.ETH)\r\n  const reserveSOCKSToken = useAddressBalance(\r\n    exchangeContractSOCKS && exchangeContractSOCKS.address,\r\n    TOKEN_ADDRESSES.OWN\r\n  )\r\n  const { reserveETH: reserveSelectedTokenETH, reserveToken: reserveSelectedTokenToken } = useExchangeReserves(\r\n    TOKEN_ADDRESSES[selectedTokenSymbol]\r\n  )\r\n\r\n  const [USDExchangeRateETH, setUSDExchangeRateETH] = useState()\r\n  const [USDExchangeRateSelectedToken, setUSDExchangeRateSelectedToken] = useState()\r\n\r\n  const ready = !!(\r\n    (account === null || allowanceSOCKS) &&\r\n    (selectedTokenSymbol === 'ETH' || account === null || allowanceSelectedToken) &&\r\n    (account === null || balanceETH) &&\r\n    (account === null || balanceSOCKS) &&\r\n    (account === null || balanceSelectedToken) &&\r\n    reserveSOCKSETH &&\r\n    reserveSOCKSToken &&\r\n    (selectedTokenSymbol === 'ETH' || reserveSelectedTokenETH) &&\r\n    (selectedTokenSymbol === 'ETH' || reserveSelectedTokenToken) &&\r\n    selectedTokenSymbol &&\r\n    (USDExchangeRateETH || USDExchangeRateSelectedToken)\r\n  )\r\n\r\n  function _dollarize(amount, exchangeRate) {\r\n    return amount.mul(exchangeRate).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\r\n  }\r\n\r\n  function dollarize(amount) {\r\n    return _dollarize(\r\n      amount,\r\n      selectedTokenSymbol === TOKEN_SYMBOLS.ETH ? USDExchangeRateETH : USDExchangeRateSelectedToken\r\n    )\r\n  }\r\n\r\n  const [dollarPrice, setDollarPrice] = useState(0)\r\n  useEffect(() => {\r\n    try {\r\n      const SOCKSExchangeRateETH = getExchangeRate(reserveSOCKSToken, reserveSOCKSETH)\r\n      setDollarPrice(\r\n        SOCKSExchangeRateETH.mul(USDExchangeRateETH).div(\r\n          ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\r\n        )\r\n      )\r\n    } catch {\r\n      setDollarPrice(0)\r\n    }\r\n  }, [USDExchangeRateETH, reserveSOCKSETH, reserveSOCKSToken])\r\n\r\n  async function unlock(buyingSOCKS = true) {\r\n    const contract = buyingSOCKS ? tokenContractSelectedToken : tokenContractSOCKS\r\n    const spenderAddress = buyingSOCKS ? exchangeContractSelectedToken.address : exchangeContractSOCKS.address\r\n\r\n    const estimatedGasLimit = await contract.estimate.approve(spenderAddress, ethers.constants.MaxUint256)\r\n    const estimatedGasPrice = await library\r\n      .getGasPrice()\r\n      .then(gasPrice => gasPrice.mul(ethers.utils.bigNumberify(150)).div(ethers.utils.bigNumberify(100)))\r\n\r\n    return contract.approve(spenderAddress, ethers.constants.MaxUint256, {\r\n      gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n      gasPrice: estimatedGasPrice\r\n    })\r\n  }\r\n\r\n  // buy functionality\r\n  const validateBuy = useCallback(\r\n    numberOfSOCKS => {\r\n      // validate passed amount\r\n      let parsedValue\r\n      try {\r\n        parsedValue = ethers.utils.parseUnits(numberOfSOCKS, 18)\r\n      } catch (error) {\r\n        error.code = ERROR_CODES.INVALID_AMOUNT\r\n        throw error\r\n      }\r\n\r\n      let requiredValueInSelectedToken\r\n      try {\r\n        requiredValueInSelectedToken = calculateAmount(\r\n          selectedTokenSymbol,\r\n          TOKEN_SYMBOLS.OWN,\r\n          parsedValue,\r\n          reserveSOCKSETH,\r\n          reserveSOCKSToken,\r\n          reserveSelectedTokenETH,\r\n          reserveSelectedTokenToken\r\n        )\r\n      } catch (error) {\r\n        error.code = ERROR_CODES.INVALID_TRADE\r\n        throw error\r\n      }\r\n\r\n      // get max slippage amount\r\n      const { maximum } = calculateSlippageBounds(requiredValueInSelectedToken)\r\n\r\n      // the following are 'non-breaking' errors that will still return the data\r\n      let errorAccumulator\r\n      // validate minimum ether balance\r\n      if (balanceETH && balanceETH.lt(ethers.utils.parseEther('.01'))) {\r\n        const error = Error()\r\n        error.code = ERROR_CODES.INSUFFICIENT_ETH_GAS\r\n        if (!errorAccumulator) {\r\n          errorAccumulator = error\r\n        }\r\n      }\r\n\r\n      // validate minimum selected token balance\r\n      if (balanceSelectedToken && maximum && balanceSelectedToken.lt(maximum)) {\r\n        const error = Error()\r\n        error.code = ERROR_CODES.INSUFFICIENT_SELECTED_TOKEN_BALANCE\r\n        if (!errorAccumulator) {\r\n          errorAccumulator = error\r\n        }\r\n      }\r\n\r\n      // validate allowance\r\n      if (selectedTokenSymbol !== 'ETH') {\r\n        if (allowanceSelectedToken && maximum && allowanceSelectedToken.lt(maximum)) {\r\n          const error = Error()\r\n          error.code = ERROR_CODES.INSUFFICIENT_ALLOWANCE\r\n          if (!errorAccumulator) {\r\n            errorAccumulator = error\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        inputValue: requiredValueInSelectedToken,\r\n        maximumInputValue: maximum,\r\n        outputValue: parsedValue,\r\n        error: errorAccumulator\r\n      }\r\n    },\r\n    [\r\n      allowanceSelectedToken,\r\n      balanceETH,\r\n      balanceSelectedToken,\r\n      reserveSOCKSETH,\r\n      reserveSOCKSToken,\r\n      reserveSelectedTokenETH,\r\n      reserveSelectedTokenToken,\r\n      selectedTokenSymbol\r\n    ]\r\n  )\r\n\r\n  async function buy(maximumInputValue, outputValue) {\r\n    const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW\r\n\r\n    const estimatedGasPrice = await library\r\n      .getGasPrice()\r\n      .then(gasPrice => gasPrice.mul(ethers.utils.bigNumberify(150)).div(ethers.utils.bigNumberify(100)))\r\n\r\n    if (selectedTokenSymbol === TOKEN_SYMBOLS.ETH) {\r\n      const estimatedGasLimit = await exchangeContractSOCKS.estimate.ethToTokenSwapOutput(outputValue, deadline, {\r\n        value: maximumInputValue\r\n      })\r\n      return exchangeContractSOCKS.ethToTokenSwapOutput(outputValue, deadline, {\r\n        value: maximumInputValue,\r\n        gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n        gasPrice: estimatedGasPrice\r\n      })\r\n    } else {\r\n      const estimatedGasLimit = await exchangeContractSelectedToken.estimate.tokenToTokenSwapOutput(\r\n        outputValue,\r\n        maximumInputValue,\r\n        ethers.constants.MaxUint256,\r\n        deadline,\r\n        TOKEN_ADDRESSES.OWN\r\n      )\r\n      return exchangeContractSelectedToken.tokenToTokenSwapOutput(\r\n        outputValue,\r\n        maximumInputValue,\r\n        ethers.constants.MaxUint256,\r\n        deadline,\r\n        TOKEN_ADDRESSES.OWN,\r\n        {\r\n          gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n          gasPrice: estimatedGasPrice\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  // sell functionality\r\n  const validateSell = useCallback(\r\n    numberOfSOCKS => {\r\n      // validate passed amount\r\n      let parsedValue\r\n      try {\r\n        parsedValue = ethers.utils.parseUnits(numberOfSOCKS, 18)\r\n      } catch (error) {\r\n        error.code = ERROR_CODES.INVALID_AMOUNT\r\n        throw error\r\n      }\r\n\r\n      // how much ETH or tokens the sale will result in\r\n      let requiredValueInSelectedToken\r\n      try {\r\n        requiredValueInSelectedToken = calculateAmount(\r\n          TOKEN_SYMBOLS.SOCKS,\r\n          selectedTokenSymbol,\r\n          parsedValue,\r\n          reserveSOCKSETH,\r\n          reserveSOCKSToken,\r\n          reserveSelectedTokenETH,\r\n          reserveSelectedTokenToken\r\n        )\r\n      } catch (error) {\r\n        error.code = ERROR_CODES.INVALID_EXCHANGE\r\n        throw error\r\n      }\r\n\r\n      // slippage-ized\r\n      const { minimum } = calculateSlippageBounds(requiredValueInSelectedToken)\r\n\r\n      // the following are 'non-breaking' errors that will still return the data\r\n      let errorAccumulator\r\n      // validate minimum ether balance\r\n      if (balanceETH.lt(ethers.utils.parseEther('.01'))) {\r\n        const error = Error()\r\n        error.code = ERROR_CODES.INSUFFICIENT_ETH_GAS\r\n        if (!errorAccumulator) {\r\n          errorAccumulator = error\r\n        }\r\n      }\r\n\r\n      // validate minimum socks balance\r\n      if (balanceSOCKS.lt(parsedValue)) {\r\n        const error = Error()\r\n        error.code = ERROR_CODES.INSUFFICIENT_SELECTED_TOKEN_BALANCE\r\n        if (!errorAccumulator) {\r\n          errorAccumulator = error\r\n        }\r\n      }\r\n\r\n      // validate allowance\r\n      if (allowanceSOCKS.lt(parsedValue)) {\r\n        const error = Error()\r\n        error.code = ERROR_CODES.INSUFFICIENT_ALLOWANCE\r\n        if (!errorAccumulator) {\r\n          errorAccumulator = error\r\n        }\r\n      }\r\n\r\n      return {\r\n        inputValue: parsedValue,\r\n        outputValue: requiredValueInSelectedToken,\r\n        minimumOutputValue: minimum,\r\n        error: errorAccumulator\r\n      }\r\n    },\r\n    [\r\n      allowanceSOCKS,\r\n      balanceETH,\r\n      balanceSOCKS,\r\n      reserveSOCKSETH,\r\n      reserveSOCKSToken,\r\n      reserveSelectedTokenETH,\r\n      reserveSelectedTokenToken,\r\n      selectedTokenSymbol\r\n    ]\r\n  )\r\n\r\n  async function sell(inputValue, minimumOutputValue) {\r\n    const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW\r\n\r\n    const estimatedGasPrice = await library\r\n      .getGasPrice()\r\n      .then(gasPrice => gasPrice.mul(ethers.utils.bigNumberify(150)).div(ethers.utils.bigNumberify(100)))\r\n\r\n    if (selectedTokenSymbol === TOKEN_SYMBOLS.ETH) {\r\n      const estimatedGasLimit = await exchangeContractSOCKS.estimate.tokenToEthSwapInput(\r\n        inputValue,\r\n        minimumOutputValue,\r\n        deadline\r\n      )\r\n      return exchangeContractSOCKS.tokenToEthSwapInput(inputValue, minimumOutputValue, deadline, {\r\n        gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n        gasPrice: estimatedGasPrice\r\n      })\r\n    } else {\r\n      const estimatedGasLimit = await exchangeContractSOCKS.estimate.tokenToTokenSwapInput(\r\n        inputValue,\r\n        minimumOutputValue,\r\n        ethers.constants.One,\r\n        deadline,\r\n        TOKEN_ADDRESSES[selectedTokenSymbol]\r\n      )\r\n      return exchangeContractSOCKS.tokenToTokenSwapInput(\r\n        inputValue,\r\n        minimumOutputValue,\r\n        ethers.constants.One,\r\n        deadline,\r\n        TOKEN_ADDRESSES[selectedTokenSymbol],\r\n        {\r\n          gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n          gasPrice: estimatedGasPrice\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  async function burn(amount) {\r\n    const parsedAmount = ethers.utils.parseUnits(amount, 18)\r\n\r\n    const estimatedGasPrice = await library\r\n      .getGasPrice()\r\n      .then(gasPrice => gasPrice.mul(ethers.utils.bigNumberify(150)).div(ethers.utils.bigNumberify(100)))\r\n\r\n    const estimatedGasLimit = await tokenContractSOCKS.estimate.burn(parsedAmount)\r\n\r\n    return tokenContractSOCKS.burn(parsedAmount, {\r\n      gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n      gasPrice: estimatedGasPrice\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Body\r\n      selectedTokenSymbol={selectedTokenSymbol}\r\n      setSelectedTokenSymbol={setSelectedTokenSymbol}\r\n      ready={ready}\r\n      unlock={unlock}\r\n      validateBuy={validateBuy}\r\n      buy={buy}\r\n      validateSell={validateSell}\r\n      sell={sell}\r\n      burn={burn}\r\n      dollarize={dollarize}\r\n      dollarPrice={dollarPrice}\r\n      balanceSOCKS={balanceSOCKS}\r\n      reserveSOCKSToken={reserveSOCKSToken}\r\n      totalSupply={totalSupply}\r\n    />\r\n  )\r\n}\r\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\index.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\styles.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\signer.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Body\\index.tsx",["116","117","118"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\hooks\\index.tsx",["119","120"],"import { useEffect, useState, useCallback, useMemo } from 'react'\r\nimport { useWeb3Context } from 'web3-react'\r\nimport { FACTORY_ADDRESS } from '../utils'\r\n\r\nimport {\r\n  isAddress,\r\n  getTokenContract,\r\n  getExchangeContract,\r\n  getTokenExchangeAddressFromFactory,\r\n  getEtherBalance,\r\n  getTokenBalance,\r\n  getTokenAllowance,\r\n  TOKEN_ADDRESSES\r\n} from '../utils'\r\nimport { utils } from 'ethers'\r\n\r\nexport function useBlockEffect(functionToRun) {\r\n  const { library } = useWeb3Context()\r\n\r\n  useEffect(() => {\r\n    function wrappedEffect(blockNumber) {\r\n      functionToRun(blockNumber)\r\n    }\r\n    if (library) {      \r\n      library.on('block', wrappedEffect)\r\n      return () => {\r\n        library.removeListener('block', wrappedEffect)\r\n      }\r\n    }\r\n  }, [library, functionToRun])\r\n}\r\n\r\nexport function useTokenContract(tokenAddress, withSignerIfPossible = true) {\r\n  const { library, account } = useWeb3Context()\r\n\r\n  return useMemo(() => {\r\n    try {\r\n      return getTokenContract(tokenAddress, library, withSignerIfPossible ? account : undefined)\r\n    } catch {\r\n      return null\r\n    }\r\n  }, [account, library, tokenAddress, withSignerIfPossible])\r\n}\r\n\r\nexport function useExchangeContract(tokenAddress, withSignerIfPossible = true) {\r\n  const { library, account } = useWeb3Context()\r\n\r\n  const [exchangeAddress, setExchangeAddress] = useState<string>()\r\n  useEffect(() => {\r\n    if (isAddress(tokenAddress)) {\r\n      let stale = false\r\n      setExchangeAddress(FACTORY_ADDRESS);\r\n      /* getTokenExchangeAddressFromFactory(tokenAddress, library).then(exchangeAddress => {\r\n        if (!stale) {\r\n          setExchangeAddress(exchangeAddress)\r\n        }\r\n      }) */\r\n      return () => {\r\n        stale = true\r\n        setExchangeAddress(null)\r\n      }\r\n    }\r\n  }, [library, tokenAddress])\r\n\r\n  return useMemo(() => {\r\n    try {\r\n      return getExchangeContract(exchangeAddress, library, withSignerIfPossible ? account : undefined)\r\n    } catch {\r\n      return null\r\n    }\r\n  }, [exchangeAddress, library, withSignerIfPossible, account])\r\n}\r\n\r\nexport function useAddressBalance(address, tokenAddress) {\r\n  const { library } = useWeb3Context()\r\n\r\n  const [balance, setBalance] = useState()\r\n\r\n  const updateBalance = useCallback(() => {\r\n    if (isAddress(address) && (tokenAddress === 'ETH' || isAddress(tokenAddress))) {\r\n      let stale = false\r\n\r\n      ;(tokenAddress === 'ETH' ? getEtherBalance(address, library) : getTokenBalance(tokenAddress, address, library))\r\n        .then(value => {\r\n          if (!stale) {\r\n            setBalance(value)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          if (!stale) {\r\n            setBalance(null)\r\n          }\r\n        })\r\n      return () => {\r\n        stale = true\r\n        setBalance(null)\r\n      }\r\n    }\r\n  }, [address, library, tokenAddress])\r\n\r\n  useEffect(() => {\r\n    return updateBalance()\r\n  }, [updateBalance])\r\n\r\n  useBlockEffect(updateBalance)\r\n\r\n  return balance\r\n}\r\n\r\nexport function useTotalSupply(contract) {\r\n  const [totalSupply, setTotalSupply] = useState()\r\n\r\n  const updateTotalSupply = useCallback(() => {\r\n    if (!!contract) {\r\n      let stale = false\r\n\r\n      contract\r\n        .totalSupply()\r\n        .then(value => {\r\n          if (!stale) {\r\n            setTotalSupply(value)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          if (!stale) {\r\n            setTotalSupply(null)\r\n          }\r\n        })\r\n      return () => {\r\n        stale = true\r\n        setTotalSupply(null)\r\n      }\r\n    }\r\n  }, [contract])\r\n\r\n  useEffect(() => {\r\n    return updateTotalSupply()\r\n  }, [updateTotalSupply])\r\n\r\n  useBlockEffect(updateTotalSupply)\r\n\r\n  return totalSupply && Math.round(Number(utils.formatEther(totalSupply)))\r\n}\r\n\r\nexport function useExchangeReserves(tokenAddress) {\r\n  const exchangeContract = useExchangeContract(tokenAddress)\r\n\r\n  const reserveETH = useAddressBalance(exchangeContract && exchangeContract.address, TOKEN_ADDRESSES.ETH)\r\n  const reserveToken = useAddressBalance(exchangeContract && exchangeContract.address, tokenAddress)\r\n\r\n  return { reserveETH, reserveToken }\r\n}\r\n\r\nexport function useAddressAllowance(address, tokenAddress, spenderAddress) {\r\n  const { library } = useWeb3Context()\r\n\r\n  const [allowance, setAllowance] = useState()\r\n\r\n  const updateAllowance = useCallback(() => {\r\n    if (isAddress(address) && isAddress(tokenAddress) && isAddress(spenderAddress)) {\r\n      let stale = false\r\n\r\n      getTokenAllowance(address, tokenAddress, spenderAddress, library)\r\n        .then(allowance => {\r\n          if (!stale) {\r\n            setAllowance(allowance)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          if (!stale) {\r\n            setAllowance(null)\r\n          }\r\n        })\r\n\r\n      return () => {\r\n        stale = true\r\n        setAllowance(null)\r\n      }\r\n    }\r\n  }, [address, library, spenderAddress, tokenAddress])\r\n\r\n  useEffect(() => {\r\n    return updateAllowance()\r\n  }, [updateAllowance])\r\n\r\n  useBlockEffect(updateAllowance)\r\n\r\n  return allowance\r\n}\r\n\r\nexport function useExchangeAllowance(address, tokenAddress) {\r\n  const exchangeContract = useExchangeContract(tokenAddress)\r\n\r\n  return useAddressAllowance(address, tokenAddress, exchangeContract && exchangeContract.address)\r\n}\r\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Buttons.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Card.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Checkout.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Button.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Connect.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Works.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\BuyAndSell.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Redeem.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Confirmed.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\RedeemForm.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\IncrementToken.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Gallery\\index.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\SelectToken.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Suggest.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\context\\index.tsx",["121","122"],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":188,"column":30,"nodeType":"129","messageId":"130","endLine":188,"endColumn":51},{"ruleId":"127","severity":1,"message":"131","line":189,"column":40,"nodeType":"129","messageId":"130","endLine":189,"endColumn":71},{"ruleId":"127","severity":1,"message":"132","line":9,"column":8,"nodeType":"129","messageId":"130","endLine":9,"endColumn":20},{"ruleId":"127","severity":1,"message":"133","line":152,"column":11,"nodeType":"129","messageId":"130","endLine":152,"endColumn":18},{"ruleId":"127","severity":1,"message":"134","line":279,"column":7,"nodeType":"129","messageId":"130","endLine":279,"endColumn":22},{"ruleId":"127","severity":1,"message":"135","line":9,"column":3,"nodeType":"129","messageId":"130","endLine":9,"endColumn":37},{"ruleId":"127","severity":1,"message":"136","line":59,"column":9,"nodeType":"129","messageId":"130","endLine":59,"endColumn":14},{"ruleId":"127","severity":1,"message":"137","line":1,"column":17,"nodeType":"129","messageId":"130","endLine":1,"endColumn":25},{"ruleId":"127","severity":1,"message":"138","line":1,"column":27,"nodeType":"129","messageId":"130","endLine":1,"endColumn":37},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"@typescript-eslint/no-unused-vars","'setUSDExchangeRateETH' is assigned a value but never used.","Identifier","unusedVar","'setUSDExchangeRateSelectedToken' is assigned a value but never used.","'RedeemButton' is defined but never used.","'account' is assigned a value but never used.","'OrderStatusLink' is assigned a value but never used.","'getTokenExchangeAddressFromFactory' is defined but never used.","'stale' is assigned a value but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","no-global-assign","no-unsafe-negation"]