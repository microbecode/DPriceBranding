[{"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\index.tsx":"1","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\serviceWorker.js":"2","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\App.tsx":"3","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\index.js":"4","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\theme\\index.tsx":"5","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Main\\index.tsx":"6","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\index.tsx":"7","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\styles.js":"8","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Body\\index.tsx":"9","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\hooks\\index.tsx":"10","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Gallery\\index.js":"11","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\context\\index.tsx":"12","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Buttons.tsx":"13","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Card.tsx":"14","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Checkout.tsx":"15","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Button.tsx":"16","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Confirmed.tsx":"17","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\BuyAndSell.tsx":"18","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Works.tsx":"19","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Connect.tsx":"20","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Redeem.tsx":"21","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\IncrementToken.tsx":"22","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\SelectToken.tsx":"23","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\RedeemForm.tsx":"24","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Suggest.tsx":"25","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\signer.js":"26"},{"size":432,"mtime":1612109074275,"results":"27","hashOfConfig":"28"},{"size":4871,"mtime":1592256762000,"results":"29","hashOfConfig":"28"},{"size":2157,"mtime":1612288340799,"results":"30","hashOfConfig":"28"},{"size":1354,"mtime":1604779882992,"results":"31","hashOfConfig":"28"},{"size":1081,"mtime":1612109081329,"results":"32","hashOfConfig":"28"},{"size":18290,"mtime":1612285854361,"results":"33","hashOfConfig":"28"},{"size":6228,"mtime":1612285799586,"results":"34","hashOfConfig":"28"},{"size":144,"mtime":1592256762000,"results":"35","hashOfConfig":"28"},{"size":9009,"mtime":1612207589847,"results":"36","hashOfConfig":"28"},{"size":5276,"mtime":1612115446948,"results":"37","hashOfConfig":"28"},{"size":646,"mtime":1592256762000,"results":"38","hashOfConfig":"28"},{"size":545,"mtime":1612206059071,"results":"39","hashOfConfig":"28"},{"size":1114,"mtime":1612124431075,"results":"40","hashOfConfig":"28"},{"size":3095,"mtime":1612204045769,"results":"41","hashOfConfig":"28"},{"size":6946,"mtime":1612206051352,"results":"42","hashOfConfig":"28"},{"size":2565,"mtime":1612125287519,"results":"43","hashOfConfig":"28"},{"size":5318,"mtime":1612125116956,"results":"44","hashOfConfig":"28"},{"size":11421,"mtime":1612208019093,"results":"45","hashOfConfig":"28"},{"size":2367,"mtime":1612119335763,"results":"46","hashOfConfig":"28"},{"size":2664,"mtime":1612125304055,"results":"47","hashOfConfig":"28"},{"size":13708,"mtime":1612125374621,"results":"48","hashOfConfig":"28"},{"size":1648,"mtime":1612126984593,"results":"49","hashOfConfig":"28"},{"size":1884,"mtime":1612119318899,"results":"50","hashOfConfig":"28"},{"size":10455,"mtime":1612125850512,"results":"51","hashOfConfig":"28"},{"size":2582,"mtime":1612125722036,"results":"52","hashOfConfig":"28"},{"size":863,"mtime":1612126152677,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"m8v9km",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\index.tsx",[],["115","116"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\serviceWorker.js",[],["117","118"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\App.tsx",["119","120"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\index.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\theme\\index.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Main\\index.tsx",["121","122"],"import React, { useState, useCallback, useEffect } from 'react'\r\nimport { useWeb3Context } from 'web3-react'\r\nimport { ethers } from 'ethers'\r\n\r\nimport { TOKEN_SYMBOLS, TOKEN_ADDRESSES, ERROR_CODES } from '../../utils'\r\nimport {\r\n  useTokenContract,\r\n  useExchangeContract,\r\n  useAddressBalance,\r\n  useAddressAllowance,\r\n  useExchangeReserves,\r\n  useExchangeAllowance,\r\n  useTotalSupply\r\n} from '../../hooks'\r\nimport Body from '../Body'\r\nimport { IValidationError, IValidationTradeResult } from 'types'\r\n\r\n// denominated in bips\r\nconst GAS_MARGIN = ethers.utils.bigNumberify(1000)\r\n\r\nexport function calculateGasMargin(value, margin) {\r\n  const offset = value.mul(margin).div(ethers.utils.bigNumberify(10000))\r\n  return value.add(offset)\r\n}\r\n\r\n\r\n\r\n// denominated in seconds\r\nconst DEADLINE_FROM_NOW = 60 * 15\r\n\r\n// denominated in bips\r\nconst ALLOWED_SLIPPAGE = ethers.utils.bigNumberify(200)\r\n\r\nfunction calculateSlippageBounds(value) {\r\n  const offset = value.mul(ALLOWED_SLIPPAGE).div(ethers.utils.bigNumberify(10000))\r\n  const minimum = value.sub(offset)\r\n  const maximum = value.add(offset)\r\n  return {\r\n    minimum: minimum.lt(ethers.constants.Zero) ? ethers.constants.Zero : minimum as ethers.utils.BigNumber,\r\n    maximum: maximum.gt(ethers.constants.MaxUint256) ? ethers.constants.MaxUint256 : maximum as ethers.utils.BigNumber\r\n  }\r\n}\r\n\r\n// this mocks the getInputPrice function, and calculates the required output\r\nfunction calculateEtherTokenOutputFromInput(inputAmount, inputReserve, outputReserve) {\r\n  const inputAmountWithFee = inputAmount.mul(ethers.utils.bigNumberify(997))\r\n  const numerator = inputAmountWithFee.mul(outputReserve)\r\n  const denominator = inputReserve.mul(ethers.utils.bigNumberify(1000)).add(inputAmountWithFee)\r\n  return numerator.div(denominator) as ethers.utils.BigNumber;\r\n}\r\n\r\n// this mocks the getOutputPrice function, and calculates the required input\r\nfunction calculateEtherTokenInputFromOutput(outputAmount, inputReserve, outputReserve) {\r\n  const numerator = inputReserve.mul(outputAmount).mul(ethers.utils.bigNumberify(1000))\r\n  const denominator = outputReserve.sub(outputAmount).mul(ethers.utils.bigNumberify(997))\r\n  return numerator.div(denominator).add(ethers.constants.One) as ethers.utils.BigNumber;\r\n}\r\n\r\n// get exchange rate for a token/ETH pair\r\nfunction getExchangeRate(inputValue : ethers.utils.BigNumber, outputValue : ethers.utils.BigNumber, invert = false) {\r\n  const inputDecimals = 18\r\n  const outputDecimals = 18\r\n\r\n  if (inputValue && inputDecimals && outputValue && outputDecimals) {\r\n    const factor = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\r\n\r\n    if (invert) {\r\n      return inputValue\r\n        .mul(factor)\r\n        .div(outputValue)\r\n        .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\r\n        .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\r\n    } else {\r\n      return outputValue\r\n        .mul(factor)\r\n        .div(inputValue)\r\n        .mul(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(inputDecimals)))\r\n        .div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(outputDecimals)))\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateAmount(\r\n  inputTokenSymbol,\r\n  outputTokenSymbol,\r\n  SOCKSAmount,\r\n  reserveTOKENETH,\r\n  reserveOWNToken,\r\n  reserveSelectedTokenETH,\r\n  reserveSelectedTokenToken\r\n) {\r\n  // eth to token - buy\r\n  if (inputTokenSymbol === TOKEN_SYMBOLS.ETH && outputTokenSymbol === TOKEN_SYMBOLS.OWN) {\r\n    const amount = calculateEtherTokenInputFromOutput(SOCKSAmount, reserveTOKENETH, reserveOWNToken)\r\n    if (amount.lte(ethers.constants.Zero) || amount.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n    return amount\r\n  }\r\n\r\n  // token to eth - sell\r\n  if (inputTokenSymbol === TOKEN_SYMBOLS.OWN && outputTokenSymbol === TOKEN_SYMBOLS.ETH) {\r\n    const amount = calculateEtherTokenOutputFromInput(SOCKSAmount, reserveOWNToken, reserveTOKENETH)\r\n    if (amount.lte(ethers.constants.Zero) || amount.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n\r\n    return amount\r\n  }\r\n\r\n  // token to token - buy or sell\r\n  const buyingSOCKS = outputTokenSymbol === TOKEN_SYMBOLS.OWN\r\n\r\n  if (buyingSOCKS) {\r\n    // eth needed to buy x socks\r\n    const intermediateValue = calculateEtherTokenInputFromOutput(SOCKSAmount, reserveTOKENETH, reserveOWNToken)\r\n    // calculateEtherTokenOutputFromInput\r\n    if (intermediateValue.lte(ethers.constants.Zero) || intermediateValue.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n    // tokens needed to buy x eth\r\n    const amount = calculateEtherTokenInputFromOutput(\r\n      intermediateValue,\r\n      reserveSelectedTokenToken,\r\n      reserveSelectedTokenETH\r\n    )\r\n    if (amount.lte(ethers.constants.Zero) || amount.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n    return amount\r\n  } else {\r\n    // eth gained from selling x socks\r\n    const intermediateValue = calculateEtherTokenOutputFromInput(SOCKSAmount, reserveOWNToken, reserveTOKENETH)\r\n    if (intermediateValue.lte(ethers.constants.Zero) || intermediateValue.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n    // tokens yielded from selling x eth\r\n    const amount = calculateEtherTokenOutputFromInput(\r\n      intermediateValue,\r\n      reserveSelectedTokenETH,\r\n      reserveSelectedTokenToken\r\n    )\r\n    if (amount.lte(ethers.constants.Zero) || amount.gte(ethers.constants.MaxUint256)) {\r\n      throw Error()\r\n    }\r\n    return amount\r\n  }\r\n}\r\n\r\nexport default function Main() {\r\n  const { library, account } = useWeb3Context()\r\n\r\n  // selected token\r\n  const [selectedTokenSymbol, setSelectedTokenSymbol] = useState(TOKEN_SYMBOLS.ETH)\r\n\r\n  // get exchange contracts\r\n  const exchangeContractSOCKS = useExchangeContract(TOKEN_ADDRESSES.OWN)\r\n  const exchangeContractSelectedToken = useExchangeContract(TOKEN_ADDRESSES[selectedTokenSymbol])\r\n\r\n  // get token contracts\r\n  const tokenContractSOCKS = useTokenContract(TOKEN_ADDRESSES.OWN)\r\n  const tokenContractSelectedToken = useTokenContract(TOKEN_ADDRESSES[selectedTokenSymbol])\r\n\r\n  // get balances\r\n  const balanceETH = useAddressBalance(account, TOKEN_ADDRESSES.ETH)\r\n  const balanceOWN = useAddressBalance(account, TOKEN_ADDRESSES.OWN)\r\n  const balanceSelectedToken = useAddressBalance(account, TOKEN_ADDRESSES[selectedTokenSymbol])\r\n\r\n  // totalsupply\r\n  const totalSupply = useTotalSupply(tokenContractSOCKS)\r\n\r\n  // get allowances\r\n  const allowanceSOCKS = useAddressAllowance(\r\n    account,\r\n    TOKEN_ADDRESSES.OWN,\r\n    exchangeContractSOCKS && exchangeContractSOCKS.address\r\n  )\r\n  const allowanceSelectedToken = useExchangeAllowance(account, TOKEN_ADDRESSES[selectedTokenSymbol])\r\n\r\n  // get reserves\r\n  const reserveTOKENETH = useAddressBalance(exchangeContractSOCKS && exchangeContractSOCKS.address, TOKEN_ADDRESSES.ETH)\r\n  const reserveOWNToken = useAddressBalance(\r\n    exchangeContractSOCKS && exchangeContractSOCKS.address,\r\n    TOKEN_ADDRESSES.OWN\r\n  )\r\n  const { reserveETH: reserveSelectedTokenETH, reserveToken: reserveSelectedTokenToken } = useExchangeReserves(\r\n    TOKEN_ADDRESSES[selectedTokenSymbol]\r\n  )\r\n\r\n  const [USDExchangeRateETH, setUSDExchangeRateETH] = useState()\r\n  const [USDExchangeRateSelectedToken, setUSDExchangeRateSelectedToken] = useState()\r\n\r\n  const ready = !!(\r\n    (account === null || allowanceSOCKS) &&\r\n    (selectedTokenSymbol === 'ETH' || account === null || allowanceSelectedToken) &&\r\n    (account === null || balanceETH) &&\r\n    (account === null || balanceOWN) &&\r\n    (account === null || balanceSelectedToken) &&\r\n    reserveTOKENETH &&\r\n    reserveOWNToken &&\r\n    (selectedTokenSymbol === 'ETH' || reserveSelectedTokenETH) &&\r\n    (selectedTokenSymbol === 'ETH' || reserveSelectedTokenToken) &&\r\n    selectedTokenSymbol &&    (USDExchangeRateETH || USDExchangeRateSelectedToken)\r\n  )\r\n\r\n  console.log('is ready', ready);\r\n\r\n  function _dollarize(amount, exchangeRate) {\r\n    return amount.mul(exchangeRate).div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18)))\r\n  }\r\n\r\n  function dollarize(amount) {\r\n    return _dollarize(\r\n      amount,\r\n      selectedTokenSymbol === TOKEN_SYMBOLS.ETH ? USDExchangeRateETH : USDExchangeRateSelectedToken\r\n    )\r\n  }\r\n\r\n  const [dollarPrice, setDollarPrice] = useState<ethers.utils.BigNumber>(ethers.utils.bigNumberify(0))\r\n  useEffect(() => {\r\n    try {\r\n      const SOCKSExchangeRateETH = getExchangeRate(reserveOWNToken, reserveTOKENETH)\r\n      setDollarPrice(\r\n        SOCKSExchangeRateETH.mul(USDExchangeRateETH).div(\r\n          ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(18))\r\n        )\r\n      )\r\n    } catch {\r\n      setDollarPrice(ethers.utils.bigNumberify(0))\r\n    }\r\n  }, [USDExchangeRateETH, reserveTOKENETH, reserveOWNToken])\r\n\r\n  async function unlock(buyingSOCKS = true) {\r\n    const contract = buyingSOCKS ? tokenContractSelectedToken : tokenContractSOCKS\r\n    const spenderAddress = buyingSOCKS ? exchangeContractSelectedToken.address : exchangeContractSOCKS.address\r\n\r\n    const estimatedGasLimit = await contract.estimate.approve(spenderAddress, ethers.constants.MaxUint256)\r\n    const estimatedGasPrice = await library\r\n      .getGasPrice()\r\n      .then(gasPrice => gasPrice.mul(ethers.utils.bigNumberify(150)).div(ethers.utils.bigNumberify(100)))\r\n\r\n    return contract.approve(spenderAddress, ethers.constants.MaxUint256, {\r\n      gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n      gasPrice: estimatedGasPrice\r\n    })\r\n  }\r\n\r\n  // buy functionality\r\n  const validateBuy = useCallback(\r\n    (numberOfOwnTokens : string): IValidationTradeResult => {\r\n      // validate passed amount\r\n      let parsedValue : ethers.utils.BigNumber;\r\n      try {\r\n        parsedValue = ethers.utils.parseUnits(numberOfOwnTokens, 18)\r\n      } catch (error) {\r\n        error.code = ERROR_CODES.INVALID_AMOUNT\r\n        throw error\r\n      }\r\n\r\n      let requiredValueInSelectedToken\r\n      try {\r\n        requiredValueInSelectedToken = calculateAmount(\r\n          selectedTokenSymbol,\r\n          TOKEN_SYMBOLS.OWN,\r\n          parsedValue,\r\n          reserveTOKENETH,\r\n          reserveOWNToken,\r\n          reserveSelectedTokenETH,\r\n          reserveSelectedTokenToken\r\n        )\r\n      } catch (error) {\r\n        error.code = ERROR_CODES.INVALID_TRADE\r\n        throw error\r\n      }\r\n\r\n      // get max slippage amount\r\n      const { maximum } = calculateSlippageBounds(requiredValueInSelectedToken)\r\n\r\n      // the following are 'non-breaking' errors that will still return the data\r\n      let errorAccumulator = {} as IValidationError;\r\n      // validate minimum ether balance\r\n      if (balanceETH && balanceETH !== undefined && balanceETH.lt(ethers.utils.parseEther('.01'))) {\r\n        const error = {} as IValidationError;\r\n        error.code = ERROR_CODES.INSUFFICIENT_ETH_GAS\r\n        if (!errorAccumulator) {\r\n          errorAccumulator = error\r\n        }\r\n      }\r\n\r\n      // validate minimum selected token balance\r\n      if (balanceSelectedToken && maximum && balanceSelectedToken.lt(maximum)) {\r\n        const error = {} as IValidationError;\r\n        error.code = ERROR_CODES.INSUFFICIENT_SELECTED_TOKEN_BALANCE\r\n        if (!errorAccumulator) {\r\n          errorAccumulator = error\r\n        }\r\n      }\r\n\r\n      // validate allowance\r\n      if (selectedTokenSymbol !== 'ETH') {\r\n        if (allowanceSelectedToken && maximum && allowanceSelectedToken.lt(maximum)) {\r\n          const error = {} as IValidationError;\r\n          error.code = ERROR_CODES.INSUFFICIENT_ALLOWANCE\r\n          if (!errorAccumulator) {\r\n            errorAccumulator = error\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        inputValue: requiredValueInSelectedToken,\r\n        maximumInputValue: maximum,\r\n        outputValue: parsedValue,\r\n        error: errorAccumulator\r\n      }\r\n    },\r\n    [\r\n      allowanceSelectedToken,\r\n      balanceETH,\r\n      balanceSelectedToken,\r\n      reserveTOKENETH,\r\n      reserveOWNToken,\r\n      reserveSelectedTokenETH,\r\n      reserveSelectedTokenToken,\r\n      selectedTokenSymbol\r\n    ]\r\n  )\r\n\r\n  async function buy(maximumInputValue, outputValue) {\r\n    const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW\r\n\r\n    const estimatedGasPrice = await library\r\n      .getGasPrice()\r\n      .then(gasPrice => gasPrice.mul(ethers.utils.bigNumberify(150)).div(ethers.utils.bigNumberify(100)))\r\n\r\n    if (selectedTokenSymbol === TOKEN_SYMBOLS.ETH) {\r\n      const estimatedGasLimit = await exchangeContractSOCKS.estimate.ethToTokenSwapOutput(outputValue, deadline, {\r\n        value: maximumInputValue\r\n      })\r\n      return exchangeContractSOCKS.ethToTokenSwapOutput(outputValue, deadline, {\r\n        value: maximumInputValue,\r\n        gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n        gasPrice: estimatedGasPrice\r\n      })\r\n    } else {\r\n      const estimatedGasLimit = await exchangeContractSelectedToken.estimate.tokenToTokenSwapOutput(\r\n        outputValue,\r\n        maximumInputValue,\r\n        ethers.constants.MaxUint256,\r\n        deadline,\r\n        TOKEN_ADDRESSES.OWN\r\n      )\r\n      return exchangeContractSelectedToken.tokenToTokenSwapOutput(\r\n        outputValue,\r\n        maximumInputValue,\r\n        ethers.constants.MaxUint256,\r\n        deadline,\r\n        TOKEN_ADDRESSES.OWN,\r\n        {\r\n          gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n          gasPrice: estimatedGasPrice\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  // sell functionality\r\n  const validateSell = useCallback(\r\n    (numberOfOwnTokens : string) : IValidationTradeResult => {\r\n      // validate passed amount\r\n      let parsedValue : ethers.utils.BigNumber;\r\n      try {\r\n        parsedValue = ethers.utils.parseUnits(numberOfOwnTokens, 18)\r\n      } catch (error) {\r\n        error.code = ERROR_CODES.INVALID_AMOUNT\r\n        throw error\r\n      }\r\n\r\n      // how much ETH or tokens the sale will result in\r\n      let requiredValueInSelectedToken\r\n      try {\r\n        requiredValueInSelectedToken = calculateAmount(\r\n          TOKEN_SYMBOLS.OWN,\r\n          selectedTokenSymbol,\r\n          parsedValue,\r\n          reserveTOKENETH,\r\n          reserveOWNToken,\r\n          reserveSelectedTokenETH,\r\n          reserveSelectedTokenToken\r\n        )\r\n      } catch (error) {\r\n        //error.code = ERROR_CODES.INVALID_EXCHANGE\r\n        // LAURITODO\r\n        throw error\r\n      }\r\n\r\n      // slippage-ized\r\n      const { minimum } = calculateSlippageBounds(requiredValueInSelectedToken)\r\n\r\n      // the following are 'non-breaking' errors that will still return the data\r\n      let errorAccumulator : IValidationError;\r\n      // validate minimum ether balance\r\n      if (balanceETH.lt(ethers.utils.parseEther('.01'))) {\r\n        const error = {} as IValidationError;\r\n        error.code = ERROR_CODES.INSUFFICIENT_ETH_GAS\r\n        if (!errorAccumulator) {\r\n          errorAccumulator = error\r\n        }\r\n      }\r\n\r\n      // validate minimum socks balance\r\n      if (balanceOWN.lt(parsedValue)) {\r\n        const error = {} as IValidationError;\r\n        error.code = ERROR_CODES.INSUFFICIENT_SELECTED_TOKEN_BALANCE\r\n        if (!errorAccumulator) {\r\n          errorAccumulator = error\r\n        }\r\n      }\r\n\r\n      // validate allowance\r\n      if (allowanceSOCKS.lt(parsedValue)) {\r\n        const error = {} as IValidationError;\r\n        error.code = ERROR_CODES.INSUFFICIENT_ALLOWANCE\r\n        if (!errorAccumulator) {\r\n          errorAccumulator = error\r\n        }\r\n      }\r\n\r\n      return {\r\n        inputValue: parsedValue,\r\n        outputValue: requiredValueInSelectedToken,\r\n        minimumOutputValue: minimum,\r\n        error: errorAccumulator\r\n      }\r\n    },\r\n    [\r\n      allowanceSOCKS,\r\n      balanceETH,\r\n      balanceOWN,\r\n      reserveTOKENETH,\r\n      reserveOWNToken,\r\n      reserveSelectedTokenETH,\r\n      reserveSelectedTokenToken,\r\n      selectedTokenSymbol\r\n    ]\r\n  )\r\n\r\n  async function sell(inputValue, minimumOutputValue) {\r\n    const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW\r\n\r\n    const estimatedGasPrice = await library\r\n      .getGasPrice()\r\n      .then(gasPrice => gasPrice.mul(ethers.utils.bigNumberify(150)).div(ethers.utils.bigNumberify(100)))\r\n\r\n    if (selectedTokenSymbol === TOKEN_SYMBOLS.ETH) {\r\n      const estimatedGasLimit = await exchangeContractSOCKS.estimate.tokenToEthSwapInput(\r\n        inputValue,\r\n        minimumOutputValue,\r\n        deadline\r\n      )\r\n      return exchangeContractSOCKS.tokenToEthSwapInput(inputValue, minimumOutputValue, deadline, {\r\n        gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n        gasPrice: estimatedGasPrice\r\n      })\r\n    } else {\r\n      const estimatedGasLimit = await exchangeContractSOCKS.estimate.tokenToTokenSwapInput(\r\n        inputValue,\r\n        minimumOutputValue,\r\n        ethers.constants.One,\r\n        deadline,\r\n        TOKEN_ADDRESSES[selectedTokenSymbol]\r\n      )\r\n      return exchangeContractSOCKS.tokenToTokenSwapInput(\r\n        inputValue,\r\n        minimumOutputValue,\r\n        ethers.constants.One,\r\n        deadline,\r\n        TOKEN_ADDRESSES[selectedTokenSymbol],\r\n        {\r\n          gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n          gasPrice: estimatedGasPrice\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  async function burn(amount) {\r\n    const parsedAmount = ethers.utils.parseUnits(amount, 18)\r\n\r\n    const estimatedGasPrice = await library\r\n      .getGasPrice()\r\n      .then(gasPrice => gasPrice.mul(ethers.utils.bigNumberify(150)).div(ethers.utils.bigNumberify(100)))\r\n\r\n    const estimatedGasLimit = await tokenContractSOCKS.estimate.burn(parsedAmount)\r\n\r\n    return tokenContractSOCKS.burn(parsedAmount, {\r\n      gasLimit: calculateGasMargin(estimatedGasLimit, GAS_MARGIN),\r\n      gasPrice: estimatedGasPrice\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Body\r\n      selectedTokenSymbol={selectedTokenSymbol}\r\n      setSelectedTokenSymbol={setSelectedTokenSymbol}\r\n      ready={ready}\r\n      unlock={unlock}\r\n      validateBuy={validateBuy}\r\n      buy={buy}\r\n      validateSell={validateSell}\r\n      sell={sell}\r\n      burn={burn}\r\n      dollarize={dollarize}\r\n      dollarPrice={dollarPrice}\r\n      balanceOWN={balanceOWN}\r\n      reserveOWNToken={reserveOWNToken}\r\n      totalSupply={totalSupply}\r\n    />\r\n  )\r\n}\r\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\index.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\styles.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Body\\index.tsx",["123","124","125","126","127"],"import React, { useState, useCallback, useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3Context } from 'web3-react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { AppContext, useAppContext } from '../../context'\r\nimport Card from '../../components/Card'\r\nimport BuyButtons from '../../components/Buttons'\r\nimport RedeemButton from '../../components/RedeemButton'\r\nimport Checkout from '../../components/Checkout'\r\nimport { amountFormatter, TOTAL_NUM_OF_TOKENS } from '../../utils'\r\nimport { IValidateTrade, } from 'types'\r\nimport { ethers } from 'ethers'\r\n\r\ninterface HeaderProps {\r\n  totalSupply, \r\n  ready, \r\n  balanceOWN : ethers.utils.BigNumber, \r\n  setShowConnect : (boolean) => void\r\n}\r\n\r\nexport function Header(\r\n  { totalSupply, \r\n    ready, \r\n    balanceOWN, \r\n    setShowConnect \r\n  } : HeaderProps) {\r\n  const { account, setConnector } = useWeb3Context()\r\n\r\n  function handleAccount() {\r\n    setConnector('Injected', { suppressAndThrowErrors: true }).catch(error => {\r\n      setShowConnect(true)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <HeaderFrame balanceSOCKS={balanceOWN}>\r\n      <Link to=\"/\" style={{ textDecoration: 'none', display: 'flex', alignItems: 'center' }}>\r\n        <Unicorn>\r\n          <span role=\"img\" aria-label=\"unicorn\">\r\n            🦄\r\n          </span>{' '}\r\n          Unisocks\r\n        </Unicorn>\r\n      </Link>\r\n      <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n        {totalSupply && (\r\n          <Link to=\"/stats\" style={{ textDecoration: 'none' }}>\r\n            <Burned>\r\n              <span role=\"img\" aria-label=\"fire\">\r\n                🔥\r\n              </span>{' '}\r\n              {TOTAL_NUM_OF_TOKENS - totalSupply} <HideMobile>redeemed</HideMobile>\r\n            </Burned>\r\n          </Link>\r\n        )}\r\n        <Account onClick={() => handleAccount()} balanceOWN={balanceOWN}>\r\n          {account ? (\r\n            balanceOWN && balanceOWN.gt(0) ? (\r\n              <SockCount>{balanceOWN && `${amountFormatter(balanceOWN, 18, 0)}`} SOCKS</SockCount>\r\n            ) : (\r\n              <SockCount>{account.slice(0, 6)}...</SockCount>\r\n            )\r\n          ) : (\r\n            <SockCount>Connect Wallet</SockCount>\r\n          )}\r\n\r\n          <Status balanceOWN={balanceOWN} ready={ready} account={account} />\r\n        </Account>\r\n      </div>\r\n    </HeaderFrame>\r\n  )\r\n}\r\n\r\nconst HeaderFrame = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  margin: 0px;\r\n  font-size: 1.25rem;\r\n  color: ${props => (props.balanceOWN ? props.theme.primary : 'white')};\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  padding: 1rem;\r\n`\r\n\r\nconst Account = styled.div`\r\n  background-color: ${props => (props.balanceOWN ? '#f1f2f6' : props.theme.blue)};\r\n  padding: 0.75rem;\r\n  border-radius: 6px;\r\n  cursor: ${props => (props.balanceOWN ? 'auto' : 'pointer')};\r\n\r\n  transform: scale(1);\r\n  transition: transform 0.3s ease;\r\n\r\n  :hover {\r\n    transform: ${props => (props.balanceOWN ? 'scale(1)' : 'scale(1.02)')};\r\n    text-decoration: underline;\r\n  }\r\n`\r\n\r\nconst Burned = styled.div`\r\n  background-color: none;\r\n  border: 1px solid red;\r\n  margin-right: 1rem;\r\n  padding: 0.75rem;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  transform: scale(1);\r\n  transition: transform 0.3s ease;\r\n  line-height: 1;\r\n\r\n  :hover {\r\n    transform: scale(1.02);\r\n  }\r\n\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  color: red;\r\n`\r\n\r\nconst HideMobile = styled.span`\r\n  @media only screen and (max-width: 480px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst SockCount = styled.p`\r\n  /* color: #6c7284; */\r\n  font-weight: 500;\r\n  margin: 0px;\r\n  font-size: 14px;\r\n  float: left;\r\n`\r\n\r\nconst Status = styled.div`\r\n  display: ${props => (props.balanceOWN ? 'initial' : 'none')};\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 100%;\r\n  margin-left: 12px;\r\n  margin-top: 2px;\r\n  float: right;\r\n  background-color: ${props =>\r\n    props.account === null ? props.theme.orange : props.ready ? props.theme.green : props.theme.orange};\r\n  // props.account === null ? props.theme.orange : props.theme.green};\r\n`\r\n\r\ninterface Props {\r\n  selectedTokenSymbol,\r\n  setSelectedTokenSymbol,\r\n  ready,\r\n  unlock,\r\n  validateBuy : IValidateTrade,\r\n  buy,\r\n  validateSell : IValidateTrade,\r\n  sell,\r\n  burn,\r\n  dollarize,\r\n  dollarPrice,\r\n  balanceOWN : ethers.utils.BigNumber,\r\n  reserveOWNToken : ethers.utils.BigNumber,\r\n  totalSupply : ethers.utils.BigNumber\r\n};\r\n\r\nexport default function Body({\r\n  selectedTokenSymbol,\r\n  setSelectedTokenSymbol,\r\n  ready,\r\n  unlock,\r\n  validateBuy,\r\n  buy,\r\n  validateSell,\r\n  sell,\r\n  burn,\r\n  dollarize,\r\n  dollarPrice,\r\n  balanceOWN,\r\n  reserveOWNToken,\r\n  totalSupply\r\n} : Props) {\r\n  const { account } = useWeb3Context()\r\n\r\n  interface ITransaction {\r\n    hash: string,\r\n    type: string,\r\n    amount: number\r\n    }\r\n\r\n  const [currentTransaction, _setCurrentTransaction] = useState<ITransaction>({\r\n    amount: 0,\r\n    hash: null,\r\n    type: null\r\n  })\r\n // console.log('curr tran', currentTransaction)\r\n  const setCurrentTransaction = useCallback((hash, type, amount) => {\r\n    _setCurrentTransaction({ hash, type, amount })\r\n  }, [])\r\n  const clearCurrentTransaction = useCallback(() => {\r\n    _setCurrentTransaction(null)\r\n  }, [])\r\n  const { state, setState } = useAppContext()\r\n  const [showConnect, setShowConnect] = useState(false)\r\n  const [showWorks, setShowWorks] = useState(false)\r\n\r\n  return (\r\n    <AppWrapper overlay={state.visible}>\r\n      <Header\r\n        totalSupply={totalSupply}\r\n        ready={ready}\r\n        balanceOWN={balanceOWN}\r\n        setShowConnect={setShowConnect}\r\n      />\r\n      <Content>\r\n        <Card totalSupply={totalSupply} reserveOWNToken={reserveOWNToken} />{' '}\r\n        <Info>\r\n          <div style={{ marginBottom: '4px' }}>Buy and sell real socks with digital currency.</div>\r\n          <div style={{ marginBottom: '4px' }}>\r\n            Delivered on demand.{' '}\r\n            <a\r\n              href=\"/\"\r\n              onClick={e => {\r\n                e.preventDefault()\r\n                setState(state => ({ ...state, visible: !state.visible }))\r\n                setShowWorks(true)\r\n              }}\r\n            >\r\n              Learn more\r\n            </a>\r\n          </div>\r\n          {/* <SubInfo>\r\n            An experiment in pricing and user experience by the team at Uniswap.{' '}\r\n            <a\r\n              href=\"/\"\r\n              onClick={e => {\r\n                e.preventDefault()\r\n                setState(state => ({ ...state, visible: !state.visible }))\r\n                setShowWorks(true)\r\n              }}\r\n            >\r\n              How it works.\r\n            </a>\r\n          </SubInfo> */}\r\n        </Info>\r\n        <BuyButtons balanceOWN={balanceOWN} />\r\n      </Content>\r\n      <Checkout\r\n        selectedTokenSymbol={selectedTokenSymbol}\r\n        setSelectedTokenSymbol={setSelectedTokenSymbol}\r\n        ready={ready}\r\n        unlock={unlock}\r\n        validateBuy={validateBuy}\r\n        buy={buy}\r\n        validateSell={validateSell}\r\n        sell={sell}\r\n        burn={burn}\r\n        balanceOWN={balanceOWN}\r\n        dollarPrice={dollarPrice}\r\n        reserveOWNToken={reserveOWNToken}\r\n        dollarize={dollarize}\r\n        showConnect={showConnect}\r\n        setShowConnect={setShowConnect}\r\n        currentTransactionHash={currentTransaction.hash}\r\n        currentTransactionType={currentTransaction.type}\r\n        currentTransactionAmount={currentTransaction.amount}\r\n        setCurrentTransaction={setCurrentTransaction}\r\n        clearCurrentTransaction={clearCurrentTransaction}\r\n        showWorks={showWorks}\r\n        setShowWorks={setShowWorks}\r\n      />\r\n    </AppWrapper>\r\n  )\r\n}\r\n\r\nconst AppWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100%;\r\n  margin: 0px auto;\r\n  margin-bottom: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  overflow: ${props => (props.overlay ? 'hidden' : 'scroll')};\r\n  scroll-behavior: smooth;\r\n  position: ${props => (props.overlay ? 'fixed' : 'initial')};\r\n`\r\n\r\nconst Content = styled.div`\r\n  width: calc(100vw - 32px);\r\n  max-width: 375px;\r\n  margin-top: 72px;\r\n`\r\n\r\nconst Info = styled.div`\r\n  color: ${props => props.theme.text};\r\n  font-weight: 500;\r\n  margin: 0px;\r\n  font-size: 14px;\r\n  padding: 20px;\r\n  padding-top: 32px;\r\n  border-radius: 0 0 8px 8px;\r\n  /* border-radius: 8px; */\r\n  margin-bottom: 12px;\r\n  margin-top: -12px;\r\n  /* margin-top: 16px; */\r\n  background-color: ${props => '#f1f2f6'};\r\n  a {\r\n    color: ${props => props.theme.uniswapPink};\r\n    text-decoration: none;\r\n    /* padding-top: 8px; */\r\n    /* font-size: 14px; */\r\n  }\r\n  a:hover {\r\n    cursor: pointer;\r\n    text-decoration: underline;\r\n  }\r\n`\r\n\r\nconst OrderStatusLink = styled.p`\r\n  color: ${props => props.theme.uniswapPink};\r\n  text-align: center;\r\n  font-size: 0.6rem;\r\n`\r\n\r\nconst Unicorn = styled.p`\r\n  color: ${props => props.theme.uniswapPink};\r\n  font-weight: 600;\r\n  margin: auto 0px;\r\n  font-size: 16px;\r\n`\r\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\hooks\\index.tsx",["128","129"],"import { useEffect, useState, useCallback, useMemo } from 'react'\r\nimport { useWeb3Context } from 'web3-react'\r\nimport { FACTORY_ADDRESS } from '../utils'\r\n\r\nimport {\r\n  isAddress,\r\n  getTokenContract,\r\n  getExchangeContract,\r\n  getTokenExchangeAddressFromFactory,\r\n  getEtherBalance,\r\n  getTokenBalance,\r\n  getTokenAllowance,\r\n  TOKEN_ADDRESSES\r\n} from '../utils'\r\nimport { utils } from 'ethers'\r\n\r\nexport function useBlockEffect(functionToRun) {\r\n  const { library } = useWeb3Context()\r\n\r\n  useEffect(() => {\r\n    function wrappedEffect(blockNumber) {\r\n      functionToRun(blockNumber)\r\n    }\r\n    if (library) {      \r\n      library.on('block', wrappedEffect)\r\n      return () => {\r\n        library.removeListener('block', wrappedEffect)\r\n      }\r\n    }\r\n  }, [library, functionToRun])\r\n}\r\n\r\nexport function useTokenContract(tokenAddress, withSignerIfPossible = true) {\r\n  const { library, account } = useWeb3Context()\r\n\r\n  return useMemo(() => {\r\n    try {\r\n      return getTokenContract(tokenAddress, library, withSignerIfPossible ? account : undefined)\r\n    } catch {\r\n      return null\r\n    }\r\n  }, [account, library, tokenAddress, withSignerIfPossible])\r\n}\r\n\r\nexport function useExchangeContract(tokenAddress, withSignerIfPossible = true) {\r\n  const { library, account } = useWeb3Context()\r\n\r\n  const [exchangeAddress, setExchangeAddress] = useState<string>()\r\n  useEffect(() => {\r\n    if (isAddress(tokenAddress)) {\r\n      let stale = false\r\n      setExchangeAddress(FACTORY_ADDRESS);\r\n      /* getTokenExchangeAddressFromFactory(tokenAddress, library).then(exchangeAddress => {\r\n        if (!stale) {\r\n          setExchangeAddress(exchangeAddress)\r\n        }\r\n      }) */\r\n      return () => {\r\n        stale = true\r\n        setExchangeAddress(null)\r\n      }\r\n    }\r\n  }, [library, tokenAddress])\r\n\r\n  return useMemo(() => {\r\n    try {\r\n      return getExchangeContract(exchangeAddress, library, withSignerIfPossible ? account : undefined)\r\n    } catch {\r\n      return null\r\n    }\r\n  }, [exchangeAddress, library, withSignerIfPossible, account])\r\n}\r\n\r\nexport function useAddressBalance(address, tokenAddress) {\r\n  const { library } = useWeb3Context()\r\n\r\n  const [balance, setBalance] = useState<utils.BigNumber>()\r\n\r\n  const updateBalance = useCallback(() => {\r\n    if (isAddress(address) && (tokenAddress === 'ETH' || isAddress(tokenAddress))) {\r\n      let stale = false\r\n\r\n      ;(tokenAddress === 'ETH' ? getEtherBalance(address, library) : getTokenBalance(tokenAddress, address, library))\r\n        .then(value => {\r\n          if (!stale) {\r\n            setBalance(value)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          if (!stale) {\r\n            setBalance(null)\r\n          }\r\n        })\r\n      return () => {\r\n        stale = true\r\n        setBalance(null)\r\n      }\r\n    }\r\n  }, [address, library, tokenAddress])\r\n\r\n  useEffect(() => {\r\n    return updateBalance()\r\n  }, [updateBalance])\r\n\r\n  useBlockEffect(updateBalance)\r\n\r\n  return balance\r\n}\r\n\r\nexport function useTotalSupply(contract) {\r\n  const [totalSupply, setTotalSupply] = useState()\r\n\r\n  const updateTotalSupply = useCallback(() => {\r\n    if (!!contract) {\r\n      let stale = false\r\n\r\n      contract\r\n        .totalSupply()\r\n        .then(value => {\r\n          if (!stale) {\r\n            setTotalSupply(value)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          if (!stale) {\r\n            setTotalSupply(null)\r\n          }\r\n        })\r\n      return () => {\r\n        stale = true\r\n        setTotalSupply(null)\r\n      }\r\n    }\r\n  }, [contract])\r\n\r\n  useEffect(() => {\r\n    return updateTotalSupply()\r\n  }, [updateTotalSupply])\r\n\r\n  useBlockEffect(updateTotalSupply)\r\n\r\n  return totalSupply && Math.round(Number(utils.formatEther(totalSupply)))\r\n}\r\n\r\nexport function useExchangeReserves(tokenAddress) {\r\n  const exchangeContract = useExchangeContract(tokenAddress)\r\n\r\n  const reserveETH = useAddressBalance(exchangeContract && exchangeContract.address, TOKEN_ADDRESSES.ETH)\r\n  const reserveToken = useAddressBalance(exchangeContract && exchangeContract.address, tokenAddress)\r\n\r\n  return { reserveETH, reserveToken }\r\n}\r\n\r\nexport function useAddressAllowance(address, tokenAddress, spenderAddress) {\r\n  const { library } = useWeb3Context()\r\n\r\n  const [allowance, setAllowance] = useState<utils.BigNumber>()\r\n\r\n  const updateAllowance = useCallback(() => {\r\n    if (isAddress(address) && isAddress(tokenAddress) && isAddress(spenderAddress)) {\r\n      let stale = false\r\n\r\n      getTokenAllowance(address, tokenAddress, spenderAddress, library)\r\n        .then(allowance => {\r\n          if (!stale) {\r\n            setAllowance(allowance)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          if (!stale) {\r\n            setAllowance(null)\r\n          }\r\n        })\r\n\r\n      return () => {\r\n        stale = true\r\n        setAllowance(null)\r\n      }\r\n    }\r\n  }, [address, library, spenderAddress, tokenAddress])\r\n\r\n  useEffect(() => {\r\n    return updateAllowance()\r\n  }, [updateAllowance])\r\n\r\n  useBlockEffect(updateAllowance)\r\n\r\n  return allowance\r\n}\r\n\r\nexport function useExchangeAllowance(address, tokenAddress) {\r\n  const exchangeContract = useExchangeContract(tokenAddress)\r\n\r\n  return useAddressAllowance(address, tokenAddress, exchangeContract && exchangeContract.address)\r\n}\r\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Gallery\\index.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\context\\index.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Buttons.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Card.tsx",["130"],"import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport Tilt from 'react-tilt'\n\nimport { amountFormatter } from '../utils'\n\nimport Gallery from './Gallery'\nimport { ethers } from 'ethers'\n\ninterface Props {\n  totalSupply : ethers.utils.BigNumber,\n  reserveOWNToken : ethers.utils.BigNumber\n};\n\nexport default function Card({ totalSupply, reserveOWNToken } : Props) {\n  return (\n    <Tilt\n      style={{ background: '#000', borderRadius: '8px' }}\n      options={{ scale: 1.01, max: 10, glare: true, 'max-glare': 1, speed: 1000 }}\n    >\n      <CardWrapper>\n        <Title>DPriceBranding Edition 0</Title>\n        <SubTitle>$OWN</SubTitle>\n        <Gallery />\n        <MarketData>\n          <span>\n            {/* <CurrentPrice>{dollarPrice ? `$${amountFormatter(dollarPrice, 18, 2)} USD` : '$0.00'}</CurrentPrice> */}\n            <SockCount>\n              {reserveOWNToken && totalSupply\n                ? `${amountFormatter(reserveOWNToken, 18, 0)}/${totalSupply} available`\n                : ''}\n            </SockCount>\n          </span>\n          <Link to=\"/stats\">\n            <Info>\n              <InfoButton>?</InfoButton>\n              <Dynamic>Dynamic Pricing Stats</Dynamic>\n            </Info>\n          </Link>\n        </MarketData>\n      </CardWrapper>\n    </Tilt>\n  )\n}\n\nconst CardWrapper = styled.div`\n  /* max-width: 300px; */\n  background: #000000;\n  background: linear-gradient(162.92deg, #2b2b2b 12.36%, #000000 94.75%);\n  box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.4);\n  border-radius: 8px;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  cursor: default;\n  padding: 24px;\n  z-index: 1;\n  transform: perspective(1000px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1);\n`\n\nconst Title = styled.p`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 126.7%;\n  width: 100%;\n  margin: 0;\n`\n\nconst SubTitle = styled.p`\n  color: #6c7284;\n  font-family: Inter;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 156.7%;\n  width: 100%;\n  margin: 0;\n  font-feature-settings: 'tnum' on, 'onum' on;\n`\n\nconst SockCount = styled.p`\n  color: #aeaeae;\n  font-weight: 400;\n  margin: 0px;\n  font-size: 12px;\n  font-feature-settings: 'tnum' on, 'onum' on;\n`\n\nconst CurrentPrice = styled.p`\n  font-weight: 600;\n  font-size: 18px;\n  margin: 0px;\n  margin-bottom: 0.5rem;\n  font-feature-settings: 'tnum' on, 'onum' on;\n`\n\nconst Info = styled.div`\n  /* margin-bottom: -2px; */\n`\n\nconst Dynamic = styled.p`\n  color: #aeaeae;\n  font-style: italic;\n  font-weight: 400;\n  margin: 0px;\n  margin-top: 1px;\n  font-size: 12px;\n  float: left;\n`\n\nconst InfoButton = styled.span`\n  width: 16px;\n  height: 16px;\n  font-size: 12px;\n  color: white;\n  text-decoration: none;\n  text-align: center;\n  border-radius: 50%;\n  margin-left: 8px;\n  float: right;\n  background-color: #5ca2ff;\n`\n\nconst MarketData = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: flex-end;\n  width: 100%;\n  margin-top: 1rem;\n`\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Checkout.tsx",["131","132"],"import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3Context } from 'web3-react'\n\nimport Connect from './Connect'\nimport Works from './Works'\nimport BuyAndSell from './BuyAndSell'\nimport Redeem from './Redeem'\nimport Confirmed from './Confirmed'\nimport { useAppContext } from '../context'\nimport { TRADE_TYPES } from '../utils'\n\nimport Confetti from 'react-dom-confetti'\nimport { IAppContextState, IValidateTrade } from 'types'\n\nconst config = {\n  angle: 90,\n  spread: 76,\n  startVelocity: 51,\n  elementCount: 154,\n  dragFriction: 0.1,\n  duration: 7000,\n  stagger: 0,\n  width: '10px',\n  height: '10px',\n  colors: ['#a864fd', '#29cdff', '#78ff44', '#ff718d', '#fdff6a']\n}\n\nexport function useCount(initialValue, max) {\n  const { state, setState } = useAppContext()\n\n  function increment() {\n    setState((state : IAppContextState) => {\n      const newCount = state.count.add(1)\n      if (!max || newCount.lte(max)) {\n        return { ...state, count: newCount }\n      } else {\n        return state\n      }\n    })\n  }\n\n  function decrement() {\n    if (state.count.gt(1)) {\n      setState({ ...state, count: state.count.sub(1) })\n    }\n  }\n\n  function setCount(val) {\n    setState ({ ...state, count: val })\n  }\n\n  // ok to disable exhaustive-deps for `setState` b/c it's actually just a useState setter\n  useEffect(() => {\n    if (initialValue) {\n      setState({ ...state, count: initialValue })\n    }\n  }, [initialValue]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return [state.count, increment, decrement, setCount]\n}\n\ninterface Props {\n  selectedTokenSymbol,\n  setSelectedTokenSymbol,\n  ready,\n  unlock,\n  validateBuy : IValidateTrade,\n  buy,\n  validateSell : IValidateTrade,\n  sell,\n  burn,\n  balanceOWN,\n  dollarPrice,\n  reserveOWNToken,\n  dollarize,\n  currentTransactionHash,\n  currentTransactionType,\n  currentTransactionAmount,\n  setCurrentTransaction,\n  clearCurrentTransaction,\n  setShowConnect,\n  showConnect,\n  showWorks,\n  setShowWorks\n}\n\nexport default function Checkout({\n  selectedTokenSymbol,\n  setSelectedTokenSymbol,\n  ready,\n  unlock,\n  validateBuy,\n  buy,\n  validateSell,\n  sell,\n  burn,\n  balanceOWN,\n  dollarPrice,\n  reserveOWNToken,\n  dollarize,\n  currentTransactionHash,\n  currentTransactionType,\n  currentTransactionAmount,\n  setCurrentTransaction,\n  clearCurrentTransaction,\n  setShowConnect,\n  showConnect,\n  showWorks,\n  setShowWorks\n} : Props) {\n  const { library } = useWeb3Context()\n  const { state, setState } = useAppContext()\n\n  const [lastTransactionHash, setLastTransactionHash] = useState('')\n  const [lastTransactionType, setLastTransactionType] = useState('')\n  const [lastTransactionAmount, setLastTransactionAmount] = useState('')\n\n  const pending = !!currentTransactionHash\n  useEffect(() => {\n    if (currentTransactionHash) {\n      library.waitForTransaction(currentTransactionHash).then(() => {\n        setLastTransactionHash(currentTransactionHash)\n        setLastTransactionType(currentTransactionType)\n        setLastTransactionAmount(currentTransactionAmount)\n        clearCurrentTransaction()\n      })\n    }\n  }, [\n    currentTransactionHash,\n    library,\n    lastTransactionHash,\n    state.showConnect,\n    state.visible,\n    setShowWorks,\n    setShowConnect,\n    clearCurrentTransaction,\n    lastTransactionHash,\n    currentTransactionType,\n    currentTransactionAmount\n  ])\n\n  function closeCheckout() {\n    setShowConnect(false)\n    if (state.visible) {\n      setShowWorks(false)\n      setLastTransactionHash('')\n      setState(state => ({ ...state, visible: !state.visible }))\n    }\n  }\n\n  function renderContent() {\n    if (showConnect) {\n      return <Connect setShowConnect={setShowConnect} closeCheckout={closeCheckout} />\n    } else if (showWorks) {\n      return <Works closeCheckout={closeCheckout} />\n    } else if (lastTransactionHash) {\n      return (\n        <Confirmed\n          hash={lastTransactionHash}\n          type={lastTransactionType}\n          amount={lastTransactionAmount}\n          closeCheckout={closeCheckout}\n          clearLastTransaction={() => {\n            setLastTransactionHash('')\n            setLastTransactionType('')\n            setLastTransactionAmount('')\n          }}\n        />\n      )\n    } else {\n      return (\n        <BuyAndSell\n          selectedTokenSymbol={selectedTokenSymbol}\n          setSelectedTokenSymbol={setSelectedTokenSymbol}\n          ready={ready}\n          unlock={unlock}\n          validateBuy={validateBuy}\n          buy={buy}\n          validateSell={validateSell}\n          sell={sell}\n          dollarize={dollarize}\n          setCurrentTransaction={setCurrentTransaction}\n          currentTransactionHash={currentTransactionHash}\n          setShowConnect={setShowConnect}\n          dollarPrice={dollarPrice}\n          reserveOWNToken={reserveOWNToken}\n          pending={pending}\n        />\n      )\n    \n      \n    }\n  }\n\n  return (\n    <div>\n      <CheckoutFrame isVisible={state.visible || showConnect}>\n        {renderContent()}{' '}\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%' }}>\n          <Confetti active={!!lastTransactionHash} config={config} />\n        </div>\n      </CheckoutFrame>\n      <CheckoutBackground onClick={() => closeCheckout()} isVisible={state.visible || showConnect} />\n    </div>\n  )\n}\n\nconst CheckoutFrame = styled.div`\n  position: fixed;\n  bottom: ${props => (props.isVisible ? '0px' : '-100%')};\n  left: 0px;\n  z-index: 2;\n  visibility: ${props => !props.isVisible && 'hidden'};\n\n  transition: bottom 0.3s;\n  width: 100%;\n  margin: 0;\n  margin-top: 20px;\n  height: 524px;\n  height: fit-content;\n  border-radius: 8px 8px 0px 0px;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  justify-content: space-between;\n  background-color: #fff;\n  border-color: ${props => props.theme.black};\n  color: ${props => props.theme.primary};\n  box-sizing: border-box;\n\n  @media only screen and (min-device-width: 768px) {\n    max-width: 375px;\n    left: 0;\n    right: 0;\n    border-radius: 8px 8px;\n    visibility: ${props => !props.isVisible && 'hidden'};\n\n    bottom: ${props => (props.isVisible ? '20%' : '-100%')};\n\n    position: absolute;\n    left: 50%;\n    top: 40%;\n    -webkit-transform: translateX(-50%) translateY(-50%);\n    -ms-transform: translateX(-50%) translateY(-50%);\n    transform: translateX(-50%) translateY(-50%);\n    width: 100%;\n  }\n\n  p {\n    margin: 0px;\n  }\n`\n\nconst CheckoutBackground = styled.div`\n  position: fixed;\n  top: 0px;\n  left: 0px;\n  opacity: ${props => (props.isVisible ? '.5' : '0')};\n  width: 100vw;\n  height: 100vh;\n  z-index: ${props => (props.isVisible ? '1' : '-1')};\n  pointer-events: ${props => (props.isVisible ? 'all' : 'none')};\n  background-color: ${props => props.theme.black};\n  transition: opacity 0.3s;\n  pointer-events: ${props => (props.isVisible ? 'all' : 'none')};\n`\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Button.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Confirmed.tsx",["133"],"import React, { useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport { amountFormatter, TRADE_TYPES } from '../utils'\nimport Button from './Button'\n\nimport close from './Gallery/close.svg'\nimport sent from './Gallery/sent.png'\nimport { useAppContext } from '../context'\n\nconst ConfirmedFrame = styled.div`\n  width: 100%;\n  /* padding: 2rem; */\n  box-sizing: border-box;\n  font-size: 36px;\n  font-weight: 500;\n  /* line-height: 170%; */\n  text-align: center;\n`\n\nfunction Controls({ closeCheckout }) {\n  return (\n    <FrameControls>\n      <Unicorn>\n        <span role=\"img\" aria-label=\"unicorn\">\n          🦄\n        </span>{' '}\n        Pay\n      </Unicorn>\n      <Close src={close} onClick={() => closeCheckout()} alt=\"close\" />\n    </FrameControls>\n  )\n}\n\nconst FrameControls = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  width: 100%;\n  align-items: center;\n`\n\nconst Unicorn = styled.p`\n  color: #fff;\n  font-weight: 600;\n  margin: 0px;\n  font-size: 16px;\n`\n\nexport default function Confirmed({ hash, type, amount, clearLastTransaction, closeCheckout }) {\n  const { state } = useAppContext()\n\n  function link(hash) {\n    return `https://etherscan.io/tx/${hash}`\n  }\n\n  useEffect(() => {\n    if (!state.visible) {\n      clearLastTransaction()\n    }\n  }, [state.visible, clearLastTransaction])\n\n  if (type === TRADE_TYPES.UNLOCK) {\n    return (\n      <ConfirmedFrame>\n        <TopFrame>\n          <Controls closeCheckout={closeCheckout} />\n          <ImgStyle src={sent} alt=\"Logo\" />\n          <InfoFrame>\n            <Owned>\n              <p> Unlocked Token!</p>\n            </Owned>\n          </InfoFrame>\n        </TopFrame>\n        <CheckoutPrompt>\n          <EtherscanLink href={link(hash)} target=\"_blank\" rel=\"noopener noreferrer\">\n            Transaction Details ↗\n          </EtherscanLink>\n        </CheckoutPrompt>\n        <Shim />\n      </ConfirmedFrame>\n    )\n  } else if (type === TRADE_TYPES.BUY) {\n    return (\n      <ConfirmedFrame>\n        <TopFrame>\n          <Controls closeCheckout={closeCheckout} />\n          <ImgStyle src={sent} alt=\"Logo\" />\n          <InfoFrame>\n            <Owned>\n              <p> {`You got ${amountFormatter(amount, 18, 0)} SOCKS!`}</p>\n            </Owned>\n          </InfoFrame>\n        </TopFrame>\n        <CheckoutPrompt>\n          <EtherscanLink href={link(hash)} target=\"_blank\" rel=\"noopener noreferrer\">\n            Transaction Details ↗\n          </EtherscanLink>\n        </CheckoutPrompt>\n{/*         <ButtonFrame\n          text={`Redeem your SOCKS now`}\n          type={'cta'}\n          onClick={() => {\n            clearLastTransaction()\n            setState(state => ({ ...state, tradeType: TRADE_TYPES.REDEEM }))\n            // Trigger buy frame here!\n          }}\n        /> */}\n        {/* <Shim /> */}\n      </ConfirmedFrame>\n    )\n  } else {\n    return (\n      <ConfirmedFrame>\n        <TopFrame>\n          <Controls closeCheckout={closeCheckout} />\n          <ImgStyle src={sent} alt=\"Logo\" />\n          <InfoFrame>\n            <Owned>\n              <p>You sold socks!</p>\n            </Owned>\n          </InfoFrame>\n        </TopFrame>\n        <CheckoutPrompt>\n          <EtherscanLink href={link(hash)} target=\"_blank\" rel=\"noopener noreferrer\">\n            Transaction Details ↗\n          </EtherscanLink>\n        </CheckoutPrompt>\n        {/* <Shim /> */}\n      </ConfirmedFrame>\n    )\n  }\n}\n\nconst TopFrame = styled.div`\n  width: 100%;\n  max-width: 375px;\n  background: #000000;\n  background: linear-gradient(162.92deg, #2b2b2b 12.36%, #000000 94.75%);\n  box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.4);\n  border-radius: 8px;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 16px;\n  box-sizing: border-box;\n`\nconst Shim = styled.div`\n  height: 20px;\n`\n\nconst Close = styled.img`\n  width: 16px;\n  color: #fff;\n  font-weight: 600;\n  margin: 0px;\n  /* margin-right: 2px;\n  margin-top: -7px; */\n  height: 16px;\n  font-size: 16px;\n  padding: 4px;\n  cursor: pointer;\n`\nconst ButtonFrame = styled(Button)`\n  width: calc(100% - 2rem);\n  margin: 16px;\n  height: 48px;\n  padding: 16px;\n`\n\nconst InfoFrame = styled.div`\n  width: 100%;\n  font-size: 20px;\n  font-weight: 500;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  margin-top: 0;\n  justify-content: 'center';\n  align-items: flex-end;\n  padding: 0;\n  /* padding: 1rem 0 1rem 0; */\n  margin-top: 12px;\n  margin-bottom: 8px;\n  border-radius: 6px;\n  /* background-color: ${props => (props.hasPickedAmount ? '#000' : 'none')}; */\n  /* border: ${props => (props.hasPickedAmount ? '1px solid #3d3d3d' : 'none')}; */\n`\n\nconst Owned = styled.div`\n  font-weight: 700;\n  color: #efe7e4;\n  font-size: 24px;\n  margin-bottom: 12px;\n  margin: 0px;\n  white-space: pre-wrap;\n`\n\nconst ImgStyle = styled.img`\n  width: 300px;\n  padding: 0px;\n  box-sizing: border-box;\n`\n\nconst CheckoutPrompt = styled.p`\n  font-weight: 500;\n  font-size: 14px;\n  margin: 16px 16px 0 16px !important;\n  text-align: left;\n  color: '#000';\n  font-style: italic;\n  width: 100%;\n`\nconst EtherscanLink = styled.a`\n  text-decoration: none;\n  color: ${props => props.theme.uniswapPink};\n  font-style: normal;\n  font-weight: 400;\n  font-size: 12px;\n`\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\BuyAndSell.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Works.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Connect.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Redeem.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\IncrementToken.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\SelectToken.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\RedeemForm.tsx",["134","135","136"],"import React, { useState, useEffect, useRef, useLayoutEffect } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { useWeb3Context } from 'web3-react'\r\nimport ReCAPTCHA from 'react-google-recaptcha'\r\n\r\nimport Suggest from './Suggest'\r\n\r\n// we need to capture the full address into netlify...\r\n// https://www.netlify.com/blog/2017/07/20/how-to-integrate-netlifys-form-handling-in-a-react-app/\r\nfunction encode(data) {\r\n  return Object.keys(data)\r\n    .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\r\n    .join('&')\r\n}\r\n\r\n// variables for the netlify names of each form field\r\nconst bot = 'beep-boop'\r\nconst name = 'name'\r\nconst line1 = 'line1'\r\nconst line2 = 'line2'\r\nconst city = 'city'\r\nconst state = 'state'\r\nconst zip = 'zip'\r\nconst country = 'country'\r\nconst email = 'email'\r\nconst address = 'address'\r\nconst timestamp = 'timestamp'\r\nconst numberBurned = 'number-burned'\r\nconst signature = 'signature'\r\n\r\n// map from variables to display text for each field\r\nconst nameMap = {\r\n  [name]: 'Name',\r\n  [line1]: 'Street Address',\r\n  [line2]: 'Unit',\r\n  [city]: 'City',\r\n  [state]: 'State',\r\n  [zip]: 'ZIP',\r\n  [country]: 'Country',\r\n  [email]: 'Email',\r\n  [address]: 'Ethereum Address',\r\n  [timestamp]: 'Time',\r\n  [numberBurned]: 'SOCKS Redeemed'\r\n}\r\n\r\n// the order for fields that will be submitted\r\nconst nameOrder = [name, line1, line2, city, state, zip, country, email]\r\n\r\n// default for each form field\r\nconst defaultState = {\r\n  [bot]: '',\r\n  [name]: '',\r\n  [line1]: '',\r\n  [line2]: '',\r\n  [city]: '',\r\n  [state]: '',\r\n  [zip]: '',\r\n  [country]: '',\r\n  [email]: ''\r\n}\r\n\r\n// mapping from field to google maps return value\r\nconst addressMapping = [\r\n  { [line1]: 'street_address' },\r\n  { [city]: 'sublocality' },\r\n  { [state]: 'administrative_area_level_1' },\r\n  { [zip]: 'postal_code' },\r\n  { [country]: 'country' }\r\n]\r\n\r\nconst recaptchaEnabled = false\r\n\r\nexport default function RedeemForm({ setHasConfirmedAddress, setUserAddress, numberBurned: actualNumberBurned }) {\r\n  const { library, account } = useWeb3Context()\r\n  const [recaptcha, setRecaptcha] = useState()\r\n  const [autoAddress, setAutoAddress] = useState([])\r\n  const [inputY, setInputY] = useState(0)\r\n  const suggestEl = useRef<Element>()\r\n\r\n  const [formState, setFormState] = useState(defaultState)\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target\r\n    setFormState(state => ({ ...state, [name]: value }))\r\n  }\r\n\r\n  function updateAutoFields(address) {\r\n    let constructedStreetAddress = ''\r\n    function getTypes(addressItem, addressVal, item) {\r\n      addressItem.forEach(type => {\r\n        if (Object.keys(item)[0] === line1) {\r\n          if (type === 'street_number') {\r\n            constructedStreetAddress += addressVal\r\n          } else if (type === 'route') {\r\n            constructedStreetAddress += ' ' + addressVal\r\n          }\r\n          setFormState(state => ({ ...state, [Object.keys(item)[0]]: constructedStreetAddress }))\r\n        } else if (Object.keys(item)[0] === city) {\r\n          if (type === 'sublocality' || type === 'locality') {\r\n            setFormState(state => ({ ...state, [Object.keys(item)[0]]: addressVal }))\r\n          }\r\n        } else if (Object.keys(item)[0] === state) {\r\n          if (type === 'administrative_area_level_1') {\r\n            setFormState(state => ({ ...state, [Object.keys(item)[0]]: addressVal }))\r\n          }\r\n        } else if (Object.keys(item)[0] === country) {\r\n          if (type === 'country') {\r\n            setFormState(state => ({ ...state, [Object.keys(item)[0]]: addressVal }))\r\n          }\r\n        } else if (Object.keys(item)[0] === zip) {\r\n          if (type === 'postal_code') {\r\n            setFormState(state => ({ ...state, [Object.keys(item)[0]]: addressVal }))\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    addressMapping.forEach(item => {\r\n      address.forEach(addressItem => {\r\n        getTypes(addressItem.types, addressItem.long_name, item)\r\n      })\r\n    })\r\n  }\r\n\r\n  // keep acount in sync\r\n  useEffect(() => {\r\n    setUserAddress(autoAddress['formatted_address'])\r\n    updateAutoFields(autoAddress['address_components'] ? autoAddress['address_components'] : [])\r\n    handleChange({ target: { name: [address], value: account } })\r\n  }, [account, autoAddress, setUserAddress])\r\n\r\n  useLayoutEffect(() => {\r\n    if (suggestEl.current) {\r\n      setInputY(suggestEl.current.getBoundingClientRect().bottom)\r\n    }\r\n  }, [suggestEl])\r\n\r\n  const canSign =\r\n    formState[name] &&\r\n    formState[line1] &&\r\n    formState[city] &&\r\n    formState[state] &&\r\n    formState[zip] &&\r\n    formState[country] &&\r\n    formState[email]\r\n\r\n  function onRecaptcha(value) {\r\n    if (value) {\r\n      setRecaptcha(value)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FormFrame autocomplete=\"off\">\r\n      <input hidden type=\"text\" name=\"beep-boop\" value={formState[bot]} onChange={handleChange} />\r\n      <input\r\n        required\r\n        type=\"text\"\r\n        name={name}\r\n        value={formState[name]}\r\n        onChange={handleChange}\r\n        placeholder={nameMap[name]}\r\n        autoComplete=\"name\"\r\n      />\r\n   {/*    <Compressed>\r\n        <Suggest\r\n          required\r\n          myRef={suggestEl}\r\n          inputY={inputY}\r\n          setAutoAddress={setAutoAddress}\r\n          type=\"text\"\r\n          name={line1}\r\n          value={formState[line1]}\r\n          onChange={handleChange}\r\n          placeholder={nameMap[line1]}\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <input\r\n          type=\"text\"\r\n          name={line2}\r\n          value={formState[line2]}\r\n          onChange={handleChange}\r\n          placeholder={nameMap[line2]}\r\n          autoComplete=\"off\"\r\n        />\r\n      </Compressed> */}\r\n      <input\r\n        required\r\n        type=\"text\"\r\n        name={city}\r\n        value={formState[city]}\r\n        onChange={handleChange}\r\n        placeholder={nameMap[city]}\r\n        autoComplete=\"address-level2\"\r\n      />\r\n\r\n      <Compressed>\r\n        <input\r\n          style={{ marginRight: '8px' }}\r\n          required\r\n          type=\"text\"\r\n          name={state}\r\n          value={formState[state]}\r\n          onChange={handleChange}\r\n          placeholder={nameMap[state]}\r\n          autoComplete=\"address-level1\"\r\n        />\r\n        <input\r\n          required\r\n          type=\"text\"\r\n          name={zip}\r\n          value={formState[zip]}\r\n          onChange={handleChange}\r\n          placeholder={nameMap[zip]}\r\n          autoComplete=\"postal-code\"\r\n        />\r\n      </Compressed>\r\n\r\n      <input\r\n        required\r\n        type=\"text\"\r\n        name={country}\r\n        value={formState[country]}\r\n        onChange={handleChange}\r\n        placeholder={nameMap[country]}\r\n        autoComplete=\"country-name\"\r\n      />\r\n\r\n      <input\r\n        required\r\n        type=\"email\"\r\n        name={email}\r\n        value={formState[email]}\r\n        onChange={handleChange}\r\n        placeholder={nameMap[email]}\r\n        autoComplete=\"email\"\r\n      />\r\n\r\n      {recaptchaEnabled && <ReCAPTCHA sitekey={process.env.REACT_APP_SITE_RECAPTCHA_KEY} onChange={onRecaptcha} />}\r\n      <ButtonFrame\r\n        type=\"submit\"\r\n        disabled={!canSign || (recaptchaEnabled && !!!recaptcha)}\r\n        onClick={event => {\r\n          const signer = library.getSigner()\r\n          const timestampToSign = Math.round(Date.now() / 1000)\r\n\r\n          const header = `PLEASE VERIFY YOUR ADDRESS.\\nYour data will never be shared publicly.`\r\n          const formDataMessage = nameOrder.map(o => `${nameMap[o]}: ${formState[o]}`).join('\\n')\r\n          const autoMessage = `${nameMap[address]}: ${account}\\n${nameMap[timestamp]}: ${timestampToSign}\\n${nameMap[numberBurned]}: ${actualNumberBurned}`\r\n\r\n          signer.signMessage(`${header}\\n\\n${formDataMessage}\\n${autoMessage}`).then(returnedSignature => {\r\n            fetch('/', {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n              body: encode({\r\n                'form-name': 'redeem',\r\n                ...{\r\n                  ...formState,\r\n                  [address]: account,\r\n                  [timestamp]: timestampToSign,\r\n                  [numberBurned]: actualNumberBurned,\r\n                  [signature]: returnedSignature,\r\n                  ...(recaptchaEnabled ? { 'g-recaptcha-response': recaptcha } : {})\r\n                }\r\n              })\r\n            })\r\n              .then(() => {\r\n                setHasConfirmedAddress(true)\r\n              })\r\n              .catch(console.error)\r\n          })\r\n\r\n          event.preventDefault()\r\n        }}\r\n      >\r\n        {canSign ? 'Next' : 'Complete the form to continue'}\r\n      </ButtonFrame>\r\n      <br />\r\n    </FormFrame>\r\n  )\r\n}\r\n\r\nconst FormFrame = styled.form`\r\n  width: 100%;\r\n  color: #fff;\r\n  font-weight: 600;\r\n  margin: 16px;\r\n  /* margin-bottom: 0px; */\r\n  font-size: 16px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n\r\n  input {\r\n    border: none;\r\n    background-image: none;\r\n    background-color: transparent;\r\n    -webkit-box-shadow: none;\r\n    -moz-box-shadow: none;\r\n    box-shadow: none;\r\n    color: #000;\r\n    background-color: #f1f2f6;\r\n    padding: 8px;\r\n    margin: 4px 0 4px 0;\r\n    font-size: 16px;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n  }\r\n  input:required {\r\n    box-shadow: inset 0 0 0 1px rgba(254, 109, 222, 0.5);\r\n  }\r\n  input:valid {\r\n    border: nne;\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst Compressed = styled.span`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: nowrap;\r\n`\r\n\r\nconst ButtonFrame = styled.button`\r\n  padding: 0;\r\n  text-align: center;\r\n  border-radius: 8px;\r\n  box-sizing: border-box;\r\n  height: 48px;\r\n  width: 100%;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  line-height: 1;\r\n  border: none;\r\n  cursor: pointer;\r\n  pointer-events: ${props => (props.disabled ? 'none' : 'auto')};\r\n\r\n  background: linear-gradient(97.28deg, #fe6dde 2.08%, #ff9dea 106.51%);\r\n  box-shadow: 0px 4px 20px rgba(239, 162, 250, 0.7);\r\n  background: ${props => (props.disabled ? '#f1f2f6' : 'linear-gradient(97.28deg, #fe6dde 2.08%, #ff9dea 106.51%)')};\r\n  box-shadow: ${props => (props.disabled ? 'none' : '0px 4px 20px rgba(239, 162, 250, 0.7)')};\r\n  color: ${props => (props.disabled ? '#aeaeae' : props.theme.white)};\r\n  transform: scale(1);\r\n  transition: transform 0.3s ease;\r\n  text-align: center;\r\n  margin-top: 4px;\r\n\r\n  :hover {\r\n    transform: scale(0.99);\r\n  }\r\n`\r\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Suggest.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\signer.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":9,"column":10,"nodeType":"143","messageId":"144","endLine":9,"endColumn":21},{"ruleId":"141","severity":1,"message":"145","line":12,"column":10,"nodeType":"143","messageId":"144","endLine":12,"endColumn":16},{"ruleId":"141","severity":1,"message":"146","line":190,"column":30,"nodeType":"143","messageId":"144","endLine":190,"endColumn":51},{"ruleId":"141","severity":1,"message":"147","line":191,"column":40,"nodeType":"143","messageId":"144","endLine":191,"endColumn":71},{"ruleId":"141","severity":1,"message":"148","line":1,"column":40,"nodeType":"143","messageId":"144","endLine":1,"endColumn":50},{"ruleId":"141","severity":1,"message":"149","line":6,"column":10,"nodeType":"143","messageId":"144","endLine":6,"endColumn":20},{"ruleId":"141","severity":1,"message":"150","line":9,"column":8,"nodeType":"143","messageId":"144","endLine":9,"endColumn":20},{"ruleId":"141","severity":1,"message":"151","line":183,"column":11,"nodeType":"143","messageId":"144","endLine":183,"endColumn":18},{"ruleId":"141","severity":1,"message":"152","line":321,"column":7,"nodeType":"143","messageId":"144","endLine":321,"endColumn":22},{"ruleId":"141","severity":1,"message":"153","line":9,"column":3,"nodeType":"143","messageId":"144","endLine":9,"endColumn":37},{"ruleId":"141","severity":1,"message":"154","line":59,"column":9,"nodeType":"143","messageId":"144","endLine":59,"endColumn":14},{"ruleId":"141","severity":1,"message":"155","line":93,"column":7,"nodeType":"143","messageId":"144","endLine":93,"endColumn":19},{"ruleId":"141","severity":1,"message":"156","line":8,"column":8,"nodeType":"143","messageId":"144","endLine":8,"endColumn":14},{"ruleId":"141","severity":1,"message":"142","line":11,"column":10,"nodeType":"143","messageId":"144","endLine":11,"endColumn":21},{"ruleId":"141","severity":1,"message":"157","line":168,"column":7,"nodeType":"143","messageId":"144","endLine":168,"endColumn":18},{"ruleId":"141","severity":1,"message":"158","line":7,"column":8,"nodeType":"143","messageId":"144","endLine":7,"endColumn":15},{"ruleId":"141","severity":1,"message":"159","line":77,"column":23,"nodeType":"143","messageId":"144","endLine":77,"endColumn":37},{"ruleId":"141","severity":1,"message":"160","line":78,"column":10,"nodeType":"143","messageId":"144","endLine":78,"endColumn":16},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"@typescript-eslint/no-unused-vars","'TRADE_TYPES' is defined but never used.","Identifier","unusedVar","'ethers' is defined but never used.","'setUSDExchangeRateETH' is assigned a value but never used.","'setUSDExchangeRateSelectedToken' is assigned a value but never used.","'useContext' is defined but never used.","'AppContext' is defined but never used.","'RedeemButton' is defined but never used.","'account' is assigned a value but never used.","'OrderStatusLink' is assigned a value but never used.","'getTokenExchangeAddressFromFactory' is defined but never used.","'stale' is assigned a value but never used.","'CurrentPrice' is assigned a value but never used.","'Redeem' is defined but never used.","'ButtonFrame' is assigned a value but never used.","'Suggest' is defined but never used.","'setAutoAddress' is assigned a value but never used.","'inputY' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]