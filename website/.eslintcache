[{"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\index.tsx":"1","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\serviceWorker.js":"2","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\App.tsx":"3","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\index.js":"4","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\theme\\index.tsx":"5","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Main\\index.tsx":"6","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\index.tsx":"7","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\styles.js":"8","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Body\\index.tsx":"9","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\hooks\\index.tsx":"10","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Gallery\\index.js":"11","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\context\\index.tsx":"12","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Buttons.tsx":"13","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Card.tsx":"14","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Checkout.tsx":"15","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Button.tsx":"16","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Confirmed.tsx":"17","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\BuyAndSell.tsx":"18","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Works.tsx":"19","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Connect.tsx":"20","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Redeem.tsx":"21","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\IncrementToken.tsx":"22","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\SelectToken.tsx":"23","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\RedeemForm.tsx":"24","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Suggest.tsx":"25","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\signer.js":"26"},{"size":432,"mtime":1612109074275,"results":"27","hashOfConfig":"28"},{"size":4871,"mtime":1592256762000,"results":"29","hashOfConfig":"28"},{"size":1829,"mtime":1612126657325,"results":"30","hashOfConfig":"28"},{"size":1354,"mtime":1604779882992,"results":"31","hashOfConfig":"28"},{"size":1081,"mtime":1612109081329,"results":"32","hashOfConfig":"28"},{"size":18292,"mtime":1612204459515,"results":"33","hashOfConfig":"28"},{"size":6224,"mtime":1612119371177,"results":"34","hashOfConfig":"28"},{"size":144,"mtime":1592256762000,"results":"35","hashOfConfig":"28"},{"size":8942,"mtime":1612204452366,"results":"36","hashOfConfig":"28"},{"size":5276,"mtime":1612115446948,"results":"37","hashOfConfig":"28"},{"size":646,"mtime":1592256762000,"results":"38","hashOfConfig":"28"},{"size":545,"mtime":1612126647659,"results":"39","hashOfConfig":"28"},{"size":1114,"mtime":1612124431075,"results":"40","hashOfConfig":"28"},{"size":3095,"mtime":1612204045769,"results":"41","hashOfConfig":"28"},{"size":6931,"mtime":1612204442119,"results":"42","hashOfConfig":"28"},{"size":2565,"mtime":1612125287519,"results":"43","hashOfConfig":"28"},{"size":5318,"mtime":1612125116956,"results":"44","hashOfConfig":"28"},{"size":11142,"mtime":1612204380189,"results":"45","hashOfConfig":"28"},{"size":2367,"mtime":1612119335763,"results":"46","hashOfConfig":"28"},{"size":2664,"mtime":1612125304055,"results":"47","hashOfConfig":"28"},{"size":13708,"mtime":1612125374621,"results":"48","hashOfConfig":"28"},{"size":1648,"mtime":1612126984593,"results":"49","hashOfConfig":"28"},{"size":1884,"mtime":1612119318899,"results":"50","hashOfConfig":"28"},{"size":10455,"mtime":1612125850512,"results":"51","hashOfConfig":"28"},{"size":2582,"mtime":1612125722036,"results":"52","hashOfConfig":"28"},{"size":863,"mtime":1612126152677,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"m8v9km",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\index.tsx",[],["111","112"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\serviceWorker.js",[],["113","114"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\App.tsx",["115","116"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\index.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\theme\\index.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Main\\index.tsx",["117","118"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\index.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Web3ReactManager\\styles.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\pages\\Body\\index.tsx",["119","120","121","122","123"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\hooks\\index.tsx",["124","125"],"import { useEffect, useState, useCallback, useMemo } from 'react'\r\nimport { useWeb3Context } from 'web3-react'\r\nimport { FACTORY_ADDRESS } from '../utils'\r\n\r\nimport {\r\n  isAddress,\r\n  getTokenContract,\r\n  getExchangeContract,\r\n  getTokenExchangeAddressFromFactory,\r\n  getEtherBalance,\r\n  getTokenBalance,\r\n  getTokenAllowance,\r\n  TOKEN_ADDRESSES\r\n} from '../utils'\r\nimport { utils } from 'ethers'\r\n\r\nexport function useBlockEffect(functionToRun) {\r\n  const { library } = useWeb3Context()\r\n\r\n  useEffect(() => {\r\n    function wrappedEffect(blockNumber) {\r\n      functionToRun(blockNumber)\r\n    }\r\n    if (library) {      \r\n      library.on('block', wrappedEffect)\r\n      return () => {\r\n        library.removeListener('block', wrappedEffect)\r\n      }\r\n    }\r\n  }, [library, functionToRun])\r\n}\r\n\r\nexport function useTokenContract(tokenAddress, withSignerIfPossible = true) {\r\n  const { library, account } = useWeb3Context()\r\n\r\n  return useMemo(() => {\r\n    try {\r\n      return getTokenContract(tokenAddress, library, withSignerIfPossible ? account : undefined)\r\n    } catch {\r\n      return null\r\n    }\r\n  }, [account, library, tokenAddress, withSignerIfPossible])\r\n}\r\n\r\nexport function useExchangeContract(tokenAddress, withSignerIfPossible = true) {\r\n  const { library, account } = useWeb3Context()\r\n\r\n  const [exchangeAddress, setExchangeAddress] = useState<string>()\r\n  useEffect(() => {\r\n    if (isAddress(tokenAddress)) {\r\n      let stale = false\r\n      setExchangeAddress(FACTORY_ADDRESS);\r\n      /* getTokenExchangeAddressFromFactory(tokenAddress, library).then(exchangeAddress => {\r\n        if (!stale) {\r\n          setExchangeAddress(exchangeAddress)\r\n        }\r\n      }) */\r\n      return () => {\r\n        stale = true\r\n        setExchangeAddress(null)\r\n      }\r\n    }\r\n  }, [library, tokenAddress])\r\n\r\n  return useMemo(() => {\r\n    try {\r\n      return getExchangeContract(exchangeAddress, library, withSignerIfPossible ? account : undefined)\r\n    } catch {\r\n      return null\r\n    }\r\n  }, [exchangeAddress, library, withSignerIfPossible, account])\r\n}\r\n\r\nexport function useAddressBalance(address, tokenAddress) {\r\n  const { library } = useWeb3Context()\r\n\r\n  const [balance, setBalance] = useState<utils.BigNumber>()\r\n\r\n  const updateBalance = useCallback(() => {\r\n    if (isAddress(address) && (tokenAddress === 'ETH' || isAddress(tokenAddress))) {\r\n      let stale = false\r\n\r\n      ;(tokenAddress === 'ETH' ? getEtherBalance(address, library) : getTokenBalance(tokenAddress, address, library))\r\n        .then(value => {\r\n          if (!stale) {\r\n            setBalance(value)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          if (!stale) {\r\n            setBalance(null)\r\n          }\r\n        })\r\n      return () => {\r\n        stale = true\r\n        setBalance(null)\r\n      }\r\n    }\r\n  }, [address, library, tokenAddress])\r\n\r\n  useEffect(() => {\r\n    return updateBalance()\r\n  }, [updateBalance])\r\n\r\n  useBlockEffect(updateBalance)\r\n\r\n  return balance\r\n}\r\n\r\nexport function useTotalSupply(contract) {\r\n  const [totalSupply, setTotalSupply] = useState()\r\n\r\n  const updateTotalSupply = useCallback(() => {\r\n    if (!!contract) {\r\n      let stale = false\r\n\r\n      contract\r\n        .totalSupply()\r\n        .then(value => {\r\n          if (!stale) {\r\n            setTotalSupply(value)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          if (!stale) {\r\n            setTotalSupply(null)\r\n          }\r\n        })\r\n      return () => {\r\n        stale = true\r\n        setTotalSupply(null)\r\n      }\r\n    }\r\n  }, [contract])\r\n\r\n  useEffect(() => {\r\n    return updateTotalSupply()\r\n  }, [updateTotalSupply])\r\n\r\n  useBlockEffect(updateTotalSupply)\r\n\r\n  return totalSupply && Math.round(Number(utils.formatEther(totalSupply)))\r\n}\r\n\r\nexport function useExchangeReserves(tokenAddress) {\r\n  const exchangeContract = useExchangeContract(tokenAddress)\r\n\r\n  const reserveETH = useAddressBalance(exchangeContract && exchangeContract.address, TOKEN_ADDRESSES.ETH)\r\n  const reserveToken = useAddressBalance(exchangeContract && exchangeContract.address, tokenAddress)\r\n\r\n  return { reserveETH, reserveToken }\r\n}\r\n\r\nexport function useAddressAllowance(address, tokenAddress, spenderAddress) {\r\n  const { library } = useWeb3Context()\r\n\r\n  const [allowance, setAllowance] = useState<utils.BigNumber>()\r\n\r\n  const updateAllowance = useCallback(() => {\r\n    if (isAddress(address) && isAddress(tokenAddress) && isAddress(spenderAddress)) {\r\n      let stale = false\r\n\r\n      getTokenAllowance(address, tokenAddress, spenderAddress, library)\r\n        .then(allowance => {\r\n          if (!stale) {\r\n            setAllowance(allowance)\r\n          }\r\n        })\r\n        .catch(() => {\r\n          if (!stale) {\r\n            setAllowance(null)\r\n          }\r\n        })\r\n\r\n      return () => {\r\n        stale = true\r\n        setAllowance(null)\r\n      }\r\n    }\r\n  }, [address, library, spenderAddress, tokenAddress])\r\n\r\n  useEffect(() => {\r\n    return updateAllowance()\r\n  }, [updateAllowance])\r\n\r\n  useBlockEffect(updateAllowance)\r\n\r\n  return allowance\r\n}\r\n\r\nexport function useExchangeAllowance(address, tokenAddress) {\r\n  const exchangeContract = useExchangeContract(tokenAddress)\r\n\r\n  return useAddressAllowance(address, tokenAddress, exchangeContract && exchangeContract.address)\r\n}\r\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Gallery\\index.js",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\context\\index.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Buttons.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Card.tsx",["126"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Checkout.tsx",["127","128"],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Button.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Confirmed.tsx",["129"],"import React, { useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport { amountFormatter, TRADE_TYPES } from '../utils'\nimport Button from './Button'\n\nimport close from './Gallery/close.svg'\nimport sent from './Gallery/sent.png'\nimport { useAppContext } from '../context'\n\nconst ConfirmedFrame = styled.div`\n  width: 100%;\n  /* padding: 2rem; */\n  box-sizing: border-box;\n  font-size: 36px;\n  font-weight: 500;\n  /* line-height: 170%; */\n  text-align: center;\n`\n\nfunction Controls({ closeCheckout }) {\n  return (\n    <FrameControls>\n      <Unicorn>\n        <span role=\"img\" aria-label=\"unicorn\">\n          🦄\n        </span>{' '}\n        Pay\n      </Unicorn>\n      <Close src={close} onClick={() => closeCheckout()} alt=\"close\" />\n    </FrameControls>\n  )\n}\n\nconst FrameControls = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  width: 100%;\n  align-items: center;\n`\n\nconst Unicorn = styled.p`\n  color: #fff;\n  font-weight: 600;\n  margin: 0px;\n  font-size: 16px;\n`\n\nexport default function Confirmed({ hash, type, amount, clearLastTransaction, closeCheckout }) {\n  const { state } = useAppContext()\n\n  function link(hash) {\n    return `https://etherscan.io/tx/${hash}`\n  }\n\n  useEffect(() => {\n    if (!state.visible) {\n      clearLastTransaction()\n    }\n  }, [state.visible, clearLastTransaction])\n\n  if (type === TRADE_TYPES.UNLOCK) {\n    return (\n      <ConfirmedFrame>\n        <TopFrame>\n          <Controls closeCheckout={closeCheckout} />\n          <ImgStyle src={sent} alt=\"Logo\" />\n          <InfoFrame>\n            <Owned>\n              <p> Unlocked Token!</p>\n            </Owned>\n          </InfoFrame>\n        </TopFrame>\n        <CheckoutPrompt>\n          <EtherscanLink href={link(hash)} target=\"_blank\" rel=\"noopener noreferrer\">\n            Transaction Details ↗\n          </EtherscanLink>\n        </CheckoutPrompt>\n        <Shim />\n      </ConfirmedFrame>\n    )\n  } else if (type === TRADE_TYPES.BUY) {\n    return (\n      <ConfirmedFrame>\n        <TopFrame>\n          <Controls closeCheckout={closeCheckout} />\n          <ImgStyle src={sent} alt=\"Logo\" />\n          <InfoFrame>\n            <Owned>\n              <p> {`You got ${amountFormatter(amount, 18, 0)} SOCKS!`}</p>\n            </Owned>\n          </InfoFrame>\n        </TopFrame>\n        <CheckoutPrompt>\n          <EtherscanLink href={link(hash)} target=\"_blank\" rel=\"noopener noreferrer\">\n            Transaction Details ↗\n          </EtherscanLink>\n        </CheckoutPrompt>\n{/*         <ButtonFrame\n          text={`Redeem your SOCKS now`}\n          type={'cta'}\n          onClick={() => {\n            clearLastTransaction()\n            setState(state => ({ ...state, tradeType: TRADE_TYPES.REDEEM }))\n            // Trigger buy frame here!\n          }}\n        /> */}\n        {/* <Shim /> */}\n      </ConfirmedFrame>\n    )\n  } else {\n    return (\n      <ConfirmedFrame>\n        <TopFrame>\n          <Controls closeCheckout={closeCheckout} />\n          <ImgStyle src={sent} alt=\"Logo\" />\n          <InfoFrame>\n            <Owned>\n              <p>You sold socks!</p>\n            </Owned>\n          </InfoFrame>\n        </TopFrame>\n        <CheckoutPrompt>\n          <EtherscanLink href={link(hash)} target=\"_blank\" rel=\"noopener noreferrer\">\n            Transaction Details ↗\n          </EtherscanLink>\n        </CheckoutPrompt>\n        {/* <Shim /> */}\n      </ConfirmedFrame>\n    )\n  }\n}\n\nconst TopFrame = styled.div`\n  width: 100%;\n  max-width: 375px;\n  background: #000000;\n  background: linear-gradient(162.92deg, #2b2b2b 12.36%, #000000 94.75%);\n  box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.4);\n  border-radius: 8px;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 16px;\n  box-sizing: border-box;\n`\nconst Shim = styled.div`\n  height: 20px;\n`\n\nconst Close = styled.img`\n  width: 16px;\n  color: #fff;\n  font-weight: 600;\n  margin: 0px;\n  /* margin-right: 2px;\n  margin-top: -7px; */\n  height: 16px;\n  font-size: 16px;\n  padding: 4px;\n  cursor: pointer;\n`\nconst ButtonFrame = styled(Button)`\n  width: calc(100% - 2rem);\n  margin: 16px;\n  height: 48px;\n  padding: 16px;\n`\n\nconst InfoFrame = styled.div`\n  width: 100%;\n  font-size: 20px;\n  font-weight: 500;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  margin-top: 0;\n  justify-content: 'center';\n  align-items: flex-end;\n  padding: 0;\n  /* padding: 1rem 0 1rem 0; */\n  margin-top: 12px;\n  margin-bottom: 8px;\n  border-radius: 6px;\n  /* background-color: ${props => (props.hasPickedAmount ? '#000' : 'none')}; */\n  /* border: ${props => (props.hasPickedAmount ? '1px solid #3d3d3d' : 'none')}; */\n`\n\nconst Owned = styled.div`\n  font-weight: 700;\n  color: #efe7e4;\n  font-size: 24px;\n  margin-bottom: 12px;\n  margin: 0px;\n  white-space: pre-wrap;\n`\n\nconst ImgStyle = styled.img`\n  width: 300px;\n  padding: 0px;\n  box-sizing: border-box;\n`\n\nconst CheckoutPrompt = styled.p`\n  font-weight: 500;\n  font-size: 14px;\n  margin: 16px 16px 0 16px !important;\n  text-align: left;\n  color: '#000';\n  font-style: italic;\n  width: 100%;\n`\nconst EtherscanLink = styled.a`\n  text-decoration: none;\n  color: ${props => props.theme.uniswapPink};\n  font-style: normal;\n  font-weight: 400;\n  font-size: 12px;\n`\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\BuyAndSell.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Works.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Connect.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Redeem.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\IncrementToken.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\SelectToken.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\RedeemForm.tsx",["130","131","132"],"import React, { useState, useEffect, useRef, useLayoutEffect } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { useWeb3Context } from 'web3-react'\r\nimport ReCAPTCHA from 'react-google-recaptcha'\r\n\r\nimport Suggest from './Suggest'\r\n\r\n// we need to capture the full address into netlify...\r\n// https://www.netlify.com/blog/2017/07/20/how-to-integrate-netlifys-form-handling-in-a-react-app/\r\nfunction encode(data) {\r\n  return Object.keys(data)\r\n    .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\r\n    .join('&')\r\n}\r\n\r\n// variables for the netlify names of each form field\r\nconst bot = 'beep-boop'\r\nconst name = 'name'\r\nconst line1 = 'line1'\r\nconst line2 = 'line2'\r\nconst city = 'city'\r\nconst state = 'state'\r\nconst zip = 'zip'\r\nconst country = 'country'\r\nconst email = 'email'\r\nconst address = 'address'\r\nconst timestamp = 'timestamp'\r\nconst numberBurned = 'number-burned'\r\nconst signature = 'signature'\r\n\r\n// map from variables to display text for each field\r\nconst nameMap = {\r\n  [name]: 'Name',\r\n  [line1]: 'Street Address',\r\n  [line2]: 'Unit',\r\n  [city]: 'City',\r\n  [state]: 'State',\r\n  [zip]: 'ZIP',\r\n  [country]: 'Country',\r\n  [email]: 'Email',\r\n  [address]: 'Ethereum Address',\r\n  [timestamp]: 'Time',\r\n  [numberBurned]: 'SOCKS Redeemed'\r\n}\r\n\r\n// the order for fields that will be submitted\r\nconst nameOrder = [name, line1, line2, city, state, zip, country, email]\r\n\r\n// default for each form field\r\nconst defaultState = {\r\n  [bot]: '',\r\n  [name]: '',\r\n  [line1]: '',\r\n  [line2]: '',\r\n  [city]: '',\r\n  [state]: '',\r\n  [zip]: '',\r\n  [country]: '',\r\n  [email]: ''\r\n}\r\n\r\n// mapping from field to google maps return value\r\nconst addressMapping = [\r\n  { [line1]: 'street_address' },\r\n  { [city]: 'sublocality' },\r\n  { [state]: 'administrative_area_level_1' },\r\n  { [zip]: 'postal_code' },\r\n  { [country]: 'country' }\r\n]\r\n\r\nconst recaptchaEnabled = false\r\n\r\nexport default function RedeemForm({ setHasConfirmedAddress, setUserAddress, numberBurned: actualNumberBurned }) {\r\n  const { library, account } = useWeb3Context()\r\n  const [recaptcha, setRecaptcha] = useState()\r\n  const [autoAddress, setAutoAddress] = useState([])\r\n  const [inputY, setInputY] = useState(0)\r\n  const suggestEl = useRef<Element>()\r\n\r\n  const [formState, setFormState] = useState(defaultState)\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target\r\n    setFormState(state => ({ ...state, [name]: value }))\r\n  }\r\n\r\n  function updateAutoFields(address) {\r\n    let constructedStreetAddress = ''\r\n    function getTypes(addressItem, addressVal, item) {\r\n      addressItem.forEach(type => {\r\n        if (Object.keys(item)[0] === line1) {\r\n          if (type === 'street_number') {\r\n            constructedStreetAddress += addressVal\r\n          } else if (type === 'route') {\r\n            constructedStreetAddress += ' ' + addressVal\r\n          }\r\n          setFormState(state => ({ ...state, [Object.keys(item)[0]]: constructedStreetAddress }))\r\n        } else if (Object.keys(item)[0] === city) {\r\n          if (type === 'sublocality' || type === 'locality') {\r\n            setFormState(state => ({ ...state, [Object.keys(item)[0]]: addressVal }))\r\n          }\r\n        } else if (Object.keys(item)[0] === state) {\r\n          if (type === 'administrative_area_level_1') {\r\n            setFormState(state => ({ ...state, [Object.keys(item)[0]]: addressVal }))\r\n          }\r\n        } else if (Object.keys(item)[0] === country) {\r\n          if (type === 'country') {\r\n            setFormState(state => ({ ...state, [Object.keys(item)[0]]: addressVal }))\r\n          }\r\n        } else if (Object.keys(item)[0] === zip) {\r\n          if (type === 'postal_code') {\r\n            setFormState(state => ({ ...state, [Object.keys(item)[0]]: addressVal }))\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    addressMapping.forEach(item => {\r\n      address.forEach(addressItem => {\r\n        getTypes(addressItem.types, addressItem.long_name, item)\r\n      })\r\n    })\r\n  }\r\n\r\n  // keep acount in sync\r\n  useEffect(() => {\r\n    setUserAddress(autoAddress['formatted_address'])\r\n    updateAutoFields(autoAddress['address_components'] ? autoAddress['address_components'] : [])\r\n    handleChange({ target: { name: [address], value: account } })\r\n  }, [account, autoAddress, setUserAddress])\r\n\r\n  useLayoutEffect(() => {\r\n    if (suggestEl.current) {\r\n      setInputY(suggestEl.current.getBoundingClientRect().bottom)\r\n    }\r\n  }, [suggestEl])\r\n\r\n  const canSign =\r\n    formState[name] &&\r\n    formState[line1] &&\r\n    formState[city] &&\r\n    formState[state] &&\r\n    formState[zip] &&\r\n    formState[country] &&\r\n    formState[email]\r\n\r\n  function onRecaptcha(value) {\r\n    if (value) {\r\n      setRecaptcha(value)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FormFrame autocomplete=\"off\">\r\n      <input hidden type=\"text\" name=\"beep-boop\" value={formState[bot]} onChange={handleChange} />\r\n      <input\r\n        required\r\n        type=\"text\"\r\n        name={name}\r\n        value={formState[name]}\r\n        onChange={handleChange}\r\n        placeholder={nameMap[name]}\r\n        autoComplete=\"name\"\r\n      />\r\n   {/*    <Compressed>\r\n        <Suggest\r\n          required\r\n          myRef={suggestEl}\r\n          inputY={inputY}\r\n          setAutoAddress={setAutoAddress}\r\n          type=\"text\"\r\n          name={line1}\r\n          value={formState[line1]}\r\n          onChange={handleChange}\r\n          placeholder={nameMap[line1]}\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <input\r\n          type=\"text\"\r\n          name={line2}\r\n          value={formState[line2]}\r\n          onChange={handleChange}\r\n          placeholder={nameMap[line2]}\r\n          autoComplete=\"off\"\r\n        />\r\n      </Compressed> */}\r\n      <input\r\n        required\r\n        type=\"text\"\r\n        name={city}\r\n        value={formState[city]}\r\n        onChange={handleChange}\r\n        placeholder={nameMap[city]}\r\n        autoComplete=\"address-level2\"\r\n      />\r\n\r\n      <Compressed>\r\n        <input\r\n          style={{ marginRight: '8px' }}\r\n          required\r\n          type=\"text\"\r\n          name={state}\r\n          value={formState[state]}\r\n          onChange={handleChange}\r\n          placeholder={nameMap[state]}\r\n          autoComplete=\"address-level1\"\r\n        />\r\n        <input\r\n          required\r\n          type=\"text\"\r\n          name={zip}\r\n          value={formState[zip]}\r\n          onChange={handleChange}\r\n          placeholder={nameMap[zip]}\r\n          autoComplete=\"postal-code\"\r\n        />\r\n      </Compressed>\r\n\r\n      <input\r\n        required\r\n        type=\"text\"\r\n        name={country}\r\n        value={formState[country]}\r\n        onChange={handleChange}\r\n        placeholder={nameMap[country]}\r\n        autoComplete=\"country-name\"\r\n      />\r\n\r\n      <input\r\n        required\r\n        type=\"email\"\r\n        name={email}\r\n        value={formState[email]}\r\n        onChange={handleChange}\r\n        placeholder={nameMap[email]}\r\n        autoComplete=\"email\"\r\n      />\r\n\r\n      {recaptchaEnabled && <ReCAPTCHA sitekey={process.env.REACT_APP_SITE_RECAPTCHA_KEY} onChange={onRecaptcha} />}\r\n      <ButtonFrame\r\n        type=\"submit\"\r\n        disabled={!canSign || (recaptchaEnabled && !!!recaptcha)}\r\n        onClick={event => {\r\n          const signer = library.getSigner()\r\n          const timestampToSign = Math.round(Date.now() / 1000)\r\n\r\n          const header = `PLEASE VERIFY YOUR ADDRESS.\\nYour data will never be shared publicly.`\r\n          const formDataMessage = nameOrder.map(o => `${nameMap[o]}: ${formState[o]}`).join('\\n')\r\n          const autoMessage = `${nameMap[address]}: ${account}\\n${nameMap[timestamp]}: ${timestampToSign}\\n${nameMap[numberBurned]}: ${actualNumberBurned}`\r\n\r\n          signer.signMessage(`${header}\\n\\n${formDataMessage}\\n${autoMessage}`).then(returnedSignature => {\r\n            fetch('/', {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n              body: encode({\r\n                'form-name': 'redeem',\r\n                ...{\r\n                  ...formState,\r\n                  [address]: account,\r\n                  [timestamp]: timestampToSign,\r\n                  [numberBurned]: actualNumberBurned,\r\n                  [signature]: returnedSignature,\r\n                  ...(recaptchaEnabled ? { 'g-recaptcha-response': recaptcha } : {})\r\n                }\r\n              })\r\n            })\r\n              .then(() => {\r\n                setHasConfirmedAddress(true)\r\n              })\r\n              .catch(console.error)\r\n          })\r\n\r\n          event.preventDefault()\r\n        }}\r\n      >\r\n        {canSign ? 'Next' : 'Complete the form to continue'}\r\n      </ButtonFrame>\r\n      <br />\r\n    </FormFrame>\r\n  )\r\n}\r\n\r\nconst FormFrame = styled.form`\r\n  width: 100%;\r\n  color: #fff;\r\n  font-weight: 600;\r\n  margin: 16px;\r\n  /* margin-bottom: 0px; */\r\n  font-size: 16px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n\r\n  input {\r\n    border: none;\r\n    background-image: none;\r\n    background-color: transparent;\r\n    -webkit-box-shadow: none;\r\n    -moz-box-shadow: none;\r\n    box-shadow: none;\r\n    color: #000;\r\n    background-color: #f1f2f6;\r\n    padding: 8px;\r\n    margin: 4px 0 4px 0;\r\n    font-size: 16px;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n  }\r\n  input:required {\r\n    box-shadow: inset 0 0 0 1px rgba(254, 109, 222, 0.5);\r\n  }\r\n  input:valid {\r\n    border: nne;\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst Compressed = styled.span`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: nowrap;\r\n`\r\n\r\nconst ButtonFrame = styled.button`\r\n  padding: 0;\r\n  text-align: center;\r\n  border-radius: 8px;\r\n  box-sizing: border-box;\r\n  height: 48px;\r\n  width: 100%;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  line-height: 1;\r\n  border: none;\r\n  cursor: pointer;\r\n  pointer-events: ${props => (props.disabled ? 'none' : 'auto')};\r\n\r\n  background: linear-gradient(97.28deg, #fe6dde 2.08%, #ff9dea 106.51%);\r\n  box-shadow: 0px 4px 20px rgba(239, 162, 250, 0.7);\r\n  background: ${props => (props.disabled ? '#f1f2f6' : 'linear-gradient(97.28deg, #fe6dde 2.08%, #ff9dea 106.51%)')};\r\n  box-shadow: ${props => (props.disabled ? 'none' : '0px 4px 20px rgba(239, 162, 250, 0.7)')};\r\n  color: ${props => (props.disabled ? '#aeaeae' : props.theme.white)};\r\n  transform: scale(1);\r\n  transition: transform 0.3s ease;\r\n  text-align: center;\r\n  margin-top: 4px;\r\n\r\n  :hover {\r\n    transform: scale(0.99);\r\n  }\r\n`\r\n","C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\components\\Suggest.tsx",[],"C:\\Users\\Lauri\\Documents\\projects\\DPriceBranding\\website\\src\\utils\\signer.js",[],{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":9,"column":10,"nodeType":"139","messageId":"140","endLine":9,"endColumn":21},{"ruleId":"137","severity":1,"message":"141","line":12,"column":10,"nodeType":"139","messageId":"140","endLine":12,"endColumn":16},{"ruleId":"137","severity":1,"message":"142","line":191,"column":30,"nodeType":"139","messageId":"140","endLine":191,"endColumn":51},{"ruleId":"137","severity":1,"message":"143","line":192,"column":40,"nodeType":"139","messageId":"140","endLine":192,"endColumn":71},{"ruleId":"137","severity":1,"message":"144","line":1,"column":40,"nodeType":"139","messageId":"140","endLine":1,"endColumn":50},{"ruleId":"137","severity":1,"message":"145","line":6,"column":10,"nodeType":"139","messageId":"140","endLine":6,"endColumn":20},{"ruleId":"137","severity":1,"message":"146","line":9,"column":8,"nodeType":"139","messageId":"140","endLine":9,"endColumn":20},{"ruleId":"137","severity":1,"message":"147","line":189,"column":11,"nodeType":"139","messageId":"140","endLine":189,"endColumn":18},{"ruleId":"137","severity":1,"message":"148","line":320,"column":7,"nodeType":"139","messageId":"140","endLine":320,"endColumn":22},{"ruleId":"137","severity":1,"message":"149","line":9,"column":3,"nodeType":"139","messageId":"140","endLine":9,"endColumn":37},{"ruleId":"137","severity":1,"message":"150","line":59,"column":9,"nodeType":"139","messageId":"140","endLine":59,"endColumn":14},{"ruleId":"137","severity":1,"message":"151","line":93,"column":7,"nodeType":"139","messageId":"140","endLine":93,"endColumn":19},{"ruleId":"137","severity":1,"message":"152","line":8,"column":8,"nodeType":"139","messageId":"140","endLine":8,"endColumn":14},{"ruleId":"137","severity":1,"message":"138","line":11,"column":10,"nodeType":"139","messageId":"140","endLine":11,"endColumn":21},{"ruleId":"137","severity":1,"message":"153","line":168,"column":7,"nodeType":"139","messageId":"140","endLine":168,"endColumn":18},{"ruleId":"137","severity":1,"message":"154","line":7,"column":8,"nodeType":"139","messageId":"140","endLine":7,"endColumn":15},{"ruleId":"137","severity":1,"message":"155","line":77,"column":23,"nodeType":"139","messageId":"140","endLine":77,"endColumn":37},{"ruleId":"137","severity":1,"message":"156","line":78,"column":10,"nodeType":"139","messageId":"140","endLine":78,"endColumn":16},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"@typescript-eslint/no-unused-vars","'TRADE_TYPES' is defined but never used.","Identifier","unusedVar","'ethers' is defined but never used.","'setUSDExchangeRateETH' is assigned a value but never used.","'setUSDExchangeRateSelectedToken' is assigned a value but never used.","'useContext' is defined but never used.","'AppContext' is defined but never used.","'RedeemButton' is defined but never used.","'account' is assigned a value but never used.","'OrderStatusLink' is assigned a value but never used.","'getTokenExchangeAddressFromFactory' is defined but never used.","'stale' is assigned a value but never used.","'CurrentPrice' is assigned a value but never used.","'Redeem' is defined but never used.","'ButtonFrame' is assigned a value but never used.","'Suggest' is defined but never used.","'setAutoAddress' is assigned a value but never used.","'inputY' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]